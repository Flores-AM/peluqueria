{"version":3,"sources":["firebaseConfig.js","global.js","firestore.js","admin.js","email.js","app.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","window","brevoConfig","senderEmail","senderName","adminEmail","firebase","apps","length","initializeApp","firebaseAuth","auth","db","firestore","googleProvider","GoogleAuthProvider","addScope","Error","firestoreDB","obtenerConfiguracion","doc","collection","get","exists","data","horarioApertura","replace","horarioCierre","Array","isArray","diasLaborales","JSON","parse","e","console","error","split","map","Number","filter","n","isNaN","diasNoLaborables","Boolean","async","fecha","where","docs","generarHorariosDisponibles","config","turnosOcupados","Promise","all","this","obtenerTurnosPorFecha","slotsOcupados","forEach","turno","hora","minuto","horario","inicioMinutos","finMinutos","duracion","min","minutoSlot","horarioSlot","Math","floor","toString","padStart","push","log","_generarHorarios","fechaSeleccionada","horaApertura","parseInt","minApertura","horaCierre","minCierre","duracionTurno","horarios","horaActual","minActual","horarioStr","ocupado","includes","disponible","verificarDisponibilidad","limit","empty","obtenerTurnosSolapados","horaStr","minutoStr","horaInicio","minutoFin","minutoFinAjustado","horarioFin","userId","add","timestamp","FieldValue","serverTimestamp","expiresAt","Date","now","id","eliminarBloqueoTemporal","bloqueoId","delete","guardarTurno","turnoData","servicios","duraciones","Corte","Alisado","reduce","total","servicio","horaInicioStr","minutoInicioStr","join","docRef","estado","createdAt","actualizadoEl","ADMIN_UID","elements","authContainer","document","getElementById","adminPanel","loginBtn","logoutBtn","calendar","turnosList","fechaTitulo","modalEditar","formEditar","btnEliminar","querySelector","btnEliminarModal","closeModal","currentTurnoId","verificarFirestore","alert","setTimeout","location","reload","initAdmin","onAuthStateChanged","handleAuthState","addEventListener","signInWithGoogle","signOut","style","display","preventDefault","guardarCambiosTurno","onclick","target","obtenerConfiguracionPorDefecto","dias","warn","startsWith","normalizarDias","sort","a","b","validarHorario","horas","minutos","horarioEnMinutos","aperturaH","aperturaM","cierreH","cierreM","valido","mensaje","user","uid","showAdminPanel","initCalendar","loadTurnosForDate","toISOString","showLoginScreen","destroy","provider","signInWithPopup","message","FullCalendar","Calendar","initialView","locale","headerToolbar","left","center","right","selectable","selectMirror","dayMaxEvents","selectOverlap","dateClick","info","querySelectorAll","el","classList","remove","dayEl","dateStr","events","fetchInfo","successCallback","failureCallback","snapshot","startStr","endStr","title","cliente","start","allDay","extendedProps","telefono","email","observaciones","className","borderColor","eventClick","abrirModalEdicion","event","select","unselect","dayMaxEventRows","views","dayGridMonth","displayEventTime","timeGridWeek","timeGridDay","viewDidMount","render","getEventColor","date","fechaObj","fechaAjustada","getTime","getTimezoneOffset","options","weekday","year","month","day","textContent","toLocaleDateString","renderTurnos","orderBy","innerHTML","turnos","header","tagName","card","closest","detalles","icon","toggle","contains","btn","stopPropagation","turnoId","currentTarget","getAttribute","confirm","loading","mostrarLoading","eliminarTurno","fechaActual","abrirModalEdicionPorId","generarOpcionesHorario","value","getHours","getMinutes","refetchEvents","configurarModalEliminar","loadingIndicator","createElement","body","appendChild","selectHorario","minutoActual","option","inicioEnMinutos","finEnMinutos","query","turnosSolapados","turnoHora","turnoMinuto","turnoInicio","turnoFin","currentUser","fechaInput","validacionHorario","diaSemana","getDay","disponibilidad","turnoActualizado","update","fechaTurno","setupModalEvents","modal","enviarEmailConfirmacion","datosTurno","emailData","to","name","nombre","subject","htmlContent","s","reserva","toLocaleString","montoTotal","getFullYear","bcc","enviarEmail","functions","httpsCallable","success","pasoActual","totalPasos","datosReserva","precios","observacion","usuarioActual","elementos","progreso","btnAnterior","btnSiguiente","pasos","resumenNombre","resumenEmail","resumenTelefono","resumenServicio","resumenFecha","resumenHorario","resumenObservacion","probarConexion","hoy","mostrarError","overlay","mensajePersonalizado","duracionTotal","calcularDuracionTotal","cerrarModal","animation","inicializarEventos","retrocederPaso","avanzarPaso","actualizarServiciosSeleccionados","seleccionarElemento","horarioSeleccionado","validacion","validarDisponibilidadCompleta","validarNombre","validarEmail","validarTelefono","calcularSubtotal","subtotal","precio","serviciosSeleccionados","from","serv","toggleLoader","validarPaso","actualizarInterfaz","autocompletarFormulario","guardarDatosFormulario","actualizarResumen","limpiarSeleccion","tipo","elemento","errorElement","actualizarPasos","actualizarProgreso","actualizarBotones","simularReserva","loader","requestAnimationFrame","mostrarConfirmacion","then","enviado","completarReserva","bloquearTurnoTemporal","catch","inicializarDisponibilidad","actualizarUIFechas","generarFechasDisponibles","turnoInicioMin","turnoFinMin","t","ahoraArg","timeZone","hoyArg","getMonth","getDate","empezarDesdeManana","fechasDisponibles","diaInicial","i","setDate","esDiaLaboral","fechaStr","formatearFechaDisplay","obtenerFechaSeleccionada","partes","dia","mes","paso2","contenedorFechas","plantillaFecha","cargando","sinFechas","nuevoElemento","cloneNode","dataset","fechaReal","cargarHorariosParaFecha","paso3","contenedor","sinHorarios","ahoraEnMinutos","tiempoMinimoReserva","actualizarUIHorarios","horariosOcupados","horariosDisponibles","p1","svg","createElementNS","setAttribute","path","verificarDisponibilidadEnTiempoReal","trim","removeEventListener","manejarClickHorario","crearContenedorHorarios","paso","index","porcentaje","width","replaceWith","pasoElement","errores","msg","errorServicio","errorFecha","errorHorario","validarFormulario","test","emailElement","listaServicios","saldoPendiente","max","input","errorMsg","exito","paso6","botonNuevaReserva","insertAdjacentHTML","inicializarAuth","btnGoogle","outerHTML","displayName","guardarUsuario","limpiarUsuario","mostrarErrorAuth","code","localStorage","setItem","stringify","removeItem","actualizarUIUsuario","mostrarBotonLogin","parentElement","paso4","nombreInput","emailInput","mostrar","usuarioLS","getItem"],"mappings":"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","file":"bundle.min.js","sourcesContent":["// firebaseConfig.js - Versión completa\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBFYeM1-ZmdTwKUS4hLjx4pyBcryxdyTYU\",\r\n  authDomain: \"peluqueria-2d648.firebaseapp.com\",\r\n  projectId: \"peluqueria-2d648\",\r\n  storageBucket: \"peluqueria-2d648.appspot.com\",\r\n  messagingSenderId: \"115281106854\",\r\n  appId: \"1:115281106854:web:309315fc966472f4892167\"\r\n};\r\n\r\n// Configuración Brevo\r\nwindow.brevoConfig = {\r\n  senderEmail: \"agustinmatiasf@gmail.com\",\r\n  senderName: \"Esvelta Peluquería\",\r\n  adminEmail: \"agustinmatias62@gmail.com\"\r\n};\r\n\r\n// Inicializar Firebase\r\nif (!firebase.apps.length) {\r\n  firebase.initializeApp(firebaseConfig);\r\n}\r\n\r\n// Exportar las instancias necesarias\r\nwindow.firebaseAuth = firebase.auth();\r\nwindow.db = firebase.firestore();","window.googleProvider = new firebase.auth.GoogleAuthProvider();\r\nwindow.googleProvider.addScope('profile');\r\nwindow.googleProvider.addScope('email');","// firestore.js - Versión completa con validación cruzada\r\n(() => {\r\n  if (!firebase.apps.length) {\r\n    throw new Error('Firebase no está inicializado');\r\n  }\r\n\r\n  const { db } = window;\r\n\r\n  window.firestoreDB = {\r\n    // Obtener configuración\r\n    async obtenerConfiguracion() {\r\n      const doc = await db.collection('config').doc('horarios').get();\r\n      if (!doc.exists) throw new Error(\"No se encontró configuración\");\r\n      \r\n      const data = doc.data();\r\n      \r\n      // Limpiar formatos de horarios\r\n      if (typeof data.horarioApertura === 'string') {\r\n        data.horarioApertura = data.horarioApertura.replace(/\"/g, '');\r\n      }\r\n      if (typeof data.horarioCierre === 'string') {\r\n        data.horarioCierre = data.horarioCierre.replace(/\"/g, '');\r\n      }\r\n      \r\n      // Convertir diasLaborales a array de números\r\n      if (Array.isArray(data.diasLaborales)) {\r\n        if (data.diasLaborales.length === 1 && typeof data.diasLaborales[0] === 'string') {\r\n          // Caso: ['[1,2,3,4,5]']\r\n          try {\r\n            data.diasLaborales = JSON.parse(data.diasLaborales[0]);\r\n          } catch (e) {\r\n            console.error(\"Error parseando diasLaborales:\", e);\r\n            data.diasLaborales = [1,2,3,4,5]; // Valor por defecto (L-V)\r\n          }\r\n        }\r\n      } else if (typeof data.diasLaborales === 'string') {\r\n        // Caso: \"1,2,3,4,5\"\r\n        data.diasLaborales = data.diasLaborales.split(',').map(Number).filter(n => !isNaN(n));\r\n      }\r\n      \r\n      // Convertir diasNoLaborables si es necesario\r\n      if (typeof data.diasNoLaborables === 'string') {\r\n        try {\r\n          data.diasNoLaborables = JSON.parse(data.diasNoLaborables);\r\n        } catch (e) {\r\n          data.diasNoLaborables = data.diasNoLaborables.replace(/[\\[\\]\\s]/g, '').split(',').filter(Boolean);\r\n        }\r\n      }\r\n      \r\n      return data;\r\n    },\r\n\r\n    // Obtener turnos por fecha\r\n    async obtenerTurnosPorFecha(fecha) {\r\n      const snapshot = await db.collection('turnos')\r\n        .where('fecha', '==', fecha)\r\n        .get();\r\n      return snapshot.docs.map(doc => doc.data());\r\n    },\r\n\r\n    // Generar horarios disponibles\r\n    async generarHorariosDisponibles(fecha) {\r\n        const [config, turnosOcupados] = await Promise.all([\r\n        this.obtenerConfiguracion(),\r\n        this.obtenerTurnosPorFecha(fecha)\r\n        ]);\r\n        \r\n        // Crear array de todos los slots ocupados, incluyendo los extendidos\r\n        const slotsOcupados = [];\r\n        turnosOcupados.forEach(turno => {\r\n            const [hora, minuto] = turno.horario.split(':').map(Number);\r\n            const inicioMinutos = hora * 60 + minuto;\r\n            const finMinutos = inicioMinutos + (turno.duracion || 30);\r\n            \r\n            for (let min = inicioMinutos; min < finMinutos; min += 30) {\r\n                const horaSlot = Math.floor(min / 60);\r\n                const minutoSlot = min % 60;\r\n                const horarioSlot = `${horaSlot.toString().padStart(2, '0')}:${minutoSlot.toString().padStart(2, '0')}`;\r\n                slotsOcupados.push(horarioSlot);\r\n            }\r\n        });\r\n        \r\n        console.log(`Slots ocupados para ${fecha}:`, slotsOcupados);\r\n        \r\n        return this._generarHorarios(config, slotsOcupados, fecha);\r\n    },\r\n\r\n    // Función privada para generar horarios\r\n    _generarHorarios(config, slotsOcupados, fechaSeleccionada) {\r\n      const horarioApertura = config.horarioApertura;\r\n      const horarioCierre = config.horarioCierre;\r\n      \r\n      // Asegurar formato correcto (por si hay puntos en lugar de dos puntos)\r\n      const horaApertura = parseInt(horarioApertura.replace('.', ':').split(':')[0]);\r\n      const minApertura = parseInt(horarioApertura.replace('.', ':').split(':')[1] || 0);\r\n      const horaCierre = parseInt(horarioCierre.replace('.', ':').split(':')[0]);\r\n      const minCierre = parseInt(horarioCierre.replace('.', ':').split(':')[1] || 0);\r\n      const duracion = config.duracionTurno;\r\n\r\n      // Validación de valores numéricos\r\n      if (isNaN(horaApertura)) throw new Error('Horario apertura inválido');\r\n      if (isNaN(minApertura)) minApertura = 0;\r\n      if (isNaN(horaCierre)) throw new Error('Horario cierre inválido');\r\n      if (isNaN(minCierre)) minCierre = 0;\r\n      if (isNaN(duracion)) throw new Error('Duración turno inválida');\r\n\r\n      const horarios = [];\r\n      let horaActual = horaApertura;\r\n      let minActual = minApertura;\r\n\r\n      while (horaActual < horaCierre || (horaActual === horaCierre && minActual <= minCierre)) {\r\n        const horarioStr = `${horaActual.toString().padStart(2, '0')}:${minActual.toString().padStart(2, '0')}`;\r\n        \r\n        const ocupado = slotsOcupados.includes(horarioStr);\r\n\r\n        horarios.push({\r\n          hora: horarioStr,\r\n          disponible: !ocupado\r\n        });\r\n\r\n        // Avanzar el tiempo\r\n        minActual += duracion;\r\n        if (minActual >= 60) {\r\n          horaActual += Math.floor(minActual / 60);\r\n          minActual = minActual % 60;\r\n        }\r\n      }\r\n\r\n      // Validación mínima de resultados\r\n      if (horarios.length === 0) {\r\n        console.error('No se generaron horarios con la configuración:', config);\r\n        throw new Error('No se pudieron generar horarios');\r\n      }\r\n\r\n      console.log(`Horarios generados para ${fechaSeleccionada}:`, horarios);\r\n      return horarios;\r\n    },\r\n\r\n    // Verificar disponibilidad básica\r\n    async verificarDisponibilidad(fecha, horario) {\r\n          try {\r\n            const snapshot = await db.collection('turnos')\r\n                .where('fecha', '==', fecha)\r\n                .where('horario', '==', horario)\r\n                .limit(1)\r\n                .get();\r\n                \r\n            return snapshot.empty;\r\n        } catch (error) {\r\n            console.error(\"Error verificando disponibilidad:\", error);\r\n            return false;\r\n        }\r\n    },\r\n    \r\n    // Verificar solapamientos\r\n    async obtenerTurnosSolapados(fecha, horario, duracion) {\r\n      const [horaStr, minutoStr] = horario.split(':');\r\n      const horaInicio = parseInt(horaStr);\r\n      const minutoInicio = parseInt(minutoStr);\r\n      \r\n      const minutoFin = minutoInicio + duracion;\r\n      const horaFin = horaInicio + Math.floor(minutoFin / 60);\r\n      const minutoFinAjustado = minutoFin % 60;\r\n      const horarioFin = `${horaFin.toString().padStart(2, '0')}:${minutoFinAjustado.toString().padStart(2, '0')}`;\r\n      \r\n      const snapshot = await db.collection('turnos')\r\n        .where('fecha', '==', fecha)\r\n        .where('horario', '>=', horario)\r\n        .where('horario', '<', horarioFin)\r\n        .get();\r\n        \r\n      return snapshot.docs.map(doc => doc.data());\r\n    },\r\n\r\n    // Bloqueo temporal\r\n    async bloquearTurnoTemporal(fecha, horario, userId) {\r\n      const docRef = await db.collection('bloqueos_temporales').add({\r\n        fecha,\r\n        horario,\r\n        userId,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        expiresAt: new Date(Date.now() + 5*60*1000) // 5 minutos de expiración\r\n      });\r\n      return docRef.id; // Devolver el ID automático\r\n    },\r\n\r\n    async eliminarBloqueoTemporal(bloqueoId) {\r\n      await db.collection('bloqueos_temporales').doc(bloqueoId).delete();\r\n    },\r\n\r\n    // Guardar turno\r\n    async guardarTurno(turnoData) {\r\n      try {\r\n        // Calcular duración total si no viene en los datos\r\n        if (!turnoData.duracion && turnoData.servicios) {\r\n            const duraciones = {\r\n                \"Corte\": 30,\r\n                \"Teñido\": 30,\r\n                \"Alisado\": 30\r\n            };\r\n            \r\n            turnoData.duracion = turnoData.servicios.reduce((total, servicio) => {\r\n                return total + (duraciones[servicio] || 30);\r\n            }, 0);\r\n            \r\n            console.log(`Duración calculada para turno: ${turnoData.duracion} minutos`);\r\n        }\r\n        \r\n        // Convertir horario de inicio a minutos\r\n        const [horaInicioStr, minutoInicioStr] = turnoData.horario.split(':');\r\n        const horaInicio = parseInt(horaInicioStr);\r\n        const minutoInicio = parseInt(minutoInicioStr);\r\n        const inicioMinutos = horaInicio * 60 + minutoInicio;\r\n        \r\n        // Calcular horario de fin\r\n        const finMinutos = inicioMinutos + turnoData.duracion;\r\n        \r\n        // Crear array de todos los slots que ocupará este turno\r\n        const slotsOcupados = [];\r\n        for (let min = inicioMinutos; min < finMinutos; min += 30) {\r\n            const hora = Math.floor(min / 60);\r\n            const minuto = min % 60;\r\n            const horario = `${hora.toString().padStart(2, '0')}:${minuto.toString().padStart(2, '0')}`;\r\n            slotsOcupados.push(horario);\r\n        }\r\n        \r\n        console.log(`Este turno ocupará los siguientes slots: ${slotsOcupados.join(', ')}`);\r\n        \r\n        // Guardar el turno principal\r\n        const docRef = await db.collection('turnos').add({\r\n            ...turnoData,\r\n            slotsOcupados: slotsOcupados, // Guardar todos los slots ocupados\r\n            estado: 'pendiente',\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n            actualizadoEl: firebase.firestore.FieldValue.serverTimestamp()\r\n        });\r\n        \r\n        console.log(`Turno guardado exitosamente. ID: ${docRef.id}`);\r\n        return { id: docRef.id, ...turnoData };\r\n        } catch (error) {\r\n            console.error(\"Error guardando turno:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n  };\r\n})();","const ADMIN_UID = 'lnYDaOVZYOZLi9GyDdomUOZBf5p1';\r\n\r\n// Elementos del DOM\r\nconst elements = {\r\n  authContainer: document.getElementById('auth-container'),\r\n  adminPanel: document.getElementById('admin-panel'),\r\n  loginBtn: document.getElementById('btn-admin-login'),\r\n  logoutBtn: document.getElementById('logout-btn'),\r\n  calendar: document.getElementById('calendar'),\r\n  turnosList: document.getElementById('turnos-list'),\r\n  fechaTitulo: document.getElementById('fecha-titulo'),\r\n  modalEditar: document.getElementById('modal-editar'),\r\n  formEditar: document.getElementById('form-editar'),\r\n  btnEliminar: document.querySelector('.btn-eliminar'),\r\n  btnEliminarModal: document.getElementById('btn-eliminar-modal'),\r\n  closeModal: document.querySelector('.close-modal')\r\n};\r\n\r\nlet calendar;\r\nlet currentTurnoId = null;\r\n\r\nasync function verificarFirestore() {\r\n  try {\r\n    const config = await obtenerConfiguracion();\r\n    // console.log(\"Configuración cargada correctamente:\", config);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error conectando con Firestore:\", error);\r\n    alert(\"Error al conectar con la base de datos. Recargando...\");\r\n    setTimeout(() => location.reload(), 3000);\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function initAdmin() {\r\n\r\n  if (!(await verificarFirestore())) return;\r\n  \r\n  if (!elements.authContainer) return;\r\n\r\n  firebase.auth().onAuthStateChanged(handleAuthState);\r\n  \r\n  if (elements.loginBtn) {\r\n    elements.loginBtn.addEventListener('click', signInWithGoogle);\r\n  }\r\n  \r\n  if (elements.logoutBtn) {\r\n    elements.logoutBtn.addEventListener('click', signOut);\r\n  }\r\n\r\n  // Eventos del modal\r\n  if (elements.closeModal) {\r\n    elements.closeModal.addEventListener('click', () => {\r\n      elements.modalEditar.style.display = 'none';\r\n    });\r\n  }\r\n\r\n  if (elements.formEditar) {\r\n    elements.formEditar.addEventListener('submit', async (e) => {\r\n      e.preventDefault();\r\n      await guardarCambiosTurno();\r\n    });\r\n  }\r\n\r\n  // Eliminar cualquier listener previo del botón eliminar\r\n  const btnEliminarModal = document.getElementById('btn-eliminar-modal');\r\n  if (btnEliminarModal) {\r\n    btnEliminarModal.onclick = null;\r\n  }\r\n\r\n  // Cerrar modal al hacer click fuera\r\n  window.addEventListener('click', (e) => {\r\n    if (e.target === elements.modalEditar) {\r\n      elements.modalEditar.style.display = 'none';\r\n    }\r\n  });\r\n}\r\n\r\n// Agregar estas funciones al inicio del admin.js\r\nasync function obtenerConfiguracion() {\r\n  try {\r\n    const doc = await db.collection('config').doc('horarios').get();\r\n    if (!doc.exists) return obtenerConfiguracionPorDefecto();\r\n    \r\n    const data = doc.data();\r\n    \r\n    // Función robusta para normalizar días laborales\r\n    const normalizarDias = (dias) => {\r\n      if (!dias) return [1,2,3,4,5];\r\n      \r\n      // Caso: array con string JSON ['[1,2,3,4,5]']\r\n      if (Array.isArray(dias) && dias.length === 1 && typeof dias[0] === 'string') {\r\n        try {\r\n          return JSON.parse(dias[0].replace(/'/g, '\"')).map(Number);\r\n        } catch (e) {\r\n          console.warn(\"Error parseando array con string JSON\", e);\r\n        }\r\n      }\r\n      \r\n      // Caso: string \"[1,2,3,4,5]\"\r\n      if (typeof dias === 'string' && dias.startsWith('[')) {\r\n        try {\r\n          return JSON.parse(dias.replace(/'/g, '\"')).map(Number);\r\n        } catch (e) {\r\n          console.warn(\"Error parseando string JSON\", e);\r\n        }\r\n      }\r\n      \r\n      // Caso: array de números [1,2,3,4,5]\r\n      if (Array.isArray(dias)) return dias.map(Number);\r\n      \r\n      // Caso: string simple \"1,2,3,4,5\"\r\n      if (typeof dias === 'string') {\r\n        return dias.split(',').map(Number).filter(n => !isNaN(n));\r\n      }\r\n      \r\n      return [1,2,3,4,5]; // Default\r\n    };\r\n    \r\n    const diasLaborales = normalizarDias(data.diasLaborales)\r\n      .filter(n => n >= 0 && n <= 6) // Filtrar valores inválidos\r\n      .sort((a, b) => a - b); // Ordenar\r\n    \r\n    return {\r\n      horarioApertura: data.horarioApertura || \"09:00\",\r\n      horarioCierre: data.horarioCierre || \"19:00\",\r\n      duracionTurno: data.duracionTurno || 30,\r\n      diasLaborales: diasLaborales.length > 0 ? diasLaborales : [1,2,3,4,5]\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error obteniendo configuración:\", error);\r\n    return obtenerConfiguracionPorDefecto();\r\n  }\r\n}\r\n\r\nfunction obtenerConfiguracionPorDefecto() {\r\n  return {\r\n    horarioApertura: \"09:00\",\r\n    horarioCierre: \"19:00\",\r\n    duracionTurno: 30,\r\n    diasLaborales: [1,2,3,4,5] // Lunes a Viernes\r\n  };\r\n}\r\n\r\nfunction validarHorario(horario, config) {\r\n  // Convertir horario a minutos desde medianoche\r\n  const [horas, minutos] = horario.split(':').map(Number);\r\n  const horarioEnMinutos = horas * 60 + minutos;\r\n  \r\n  // Convertir horarios de apertura/cierre\r\n  const [aperturaH, aperturaM] = config.horarioApertura.split(':').map(Number);\r\n  const [cierreH, cierreM] = config.horarioCierre.split(':').map(Number);\r\n  const aperturaEnMinutos = aperturaH * 60 + aperturaM;\r\n  const cierreEnMinutos = cierreH * 60 + cierreM;\r\n  \r\n  // Validar que esté dentro del horario laboral\r\n  if (horarioEnMinutos < aperturaEnMinutos || horarioEnMinutos >= cierreEnMinutos) {\r\n    return {\r\n      valido: false,\r\n      mensaje: `El horario debe estar entre ${config.horarioApertura} y ${config.horarioCierre}`\r\n    };\r\n  }\r\n  \r\n  // Validar que sea en intervalos de 30 minutos\r\n  if (minutos % config.duracionTurno !== 0) {\r\n    return {\r\n      valido: false,\r\n      mensaje: `Los turnos deben ser en intervalos de ${config.duracionTurno} minutos (ej: 09:00, 09:30, etc.)`\r\n    };\r\n  }\r\n  \r\n  return { valido: true };\r\n}\r\n\r\nasync function handleAuthState(user) {\r\n  if (user && user.uid === ADMIN_UID) {\r\n    await showAdminPanel();\r\n    await initCalendar();\r\n    await loadTurnosForDate(new Date().toISOString().split('T')[0]);\r\n  } else {\r\n    showLoginScreen();\r\n  }\r\n}\r\n\r\nasync function showAdminPanel() {\r\n  if (elements.authContainer) elements.authContainer.style.display = 'none';\r\n  if (elements.adminPanel) elements.adminPanel.style.display = 'block';\r\n}\r\n\r\nfunction showLoginScreen() {\r\n  if (elements.authContainer) elements.authContainer.style.display = 'flex';\r\n  if (elements.adminPanel) elements.adminPanel.style.display = 'none';\r\n  if (calendar) calendar.destroy();\r\n}\r\n\r\nasync function signInWithGoogle() {\r\n  try {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    await firebase.auth().signInWithPopup(provider);\r\n  } catch (error) {\r\n    console.error(\"Error de autenticación:\", error);\r\n    alert(\"Error al iniciar sesión: \" + error.message);\r\n  }\r\n}\r\n\r\nasync function signOut() {\r\n  try {\r\n    await firebase.auth().signOut();\r\n  } catch (error) {\r\n    console.error(\"Error al cerrar sesión:\", error);\r\n  }\r\n}\r\n\r\nasync function initCalendar() {\r\n  if (!elements.calendar) return;\r\n  \r\n  calendar = new FullCalendar.Calendar(elements.calendar, {\r\n    initialView: 'dayGridMonth',\r\n    locale: 'es',\r\n    headerToolbar: {\r\n      left: 'prev,next today',\r\n      center: 'title',\r\n      right: 'none'\r\n    },\r\n    selectable: true,\r\n    selectMirror: true,\r\n    dayMaxEvents: true,\r\n    selectOverlap: false,\r\n    \r\n    dateClick: async function(info) {\r\n      // Remover la clase de selección de todas las celdas primero\r\n      document.querySelectorAll('.fc-daygrid-day-selected').forEach(el => {\r\n        el.classList.remove('fc-daygrid-day-selected');\r\n      });\r\n      \r\n      // Añadir la clase de selección a la celda clickeada\r\n      info.dayEl.classList.add('fc-daygrid-day-selected');\r\n      \r\n      // Cargar los turnos para la fecha seleccionada\r\n      await loadTurnosForDate(info.dateStr);\r\n    },\r\n    \r\n    events: async function(fetchInfo, successCallback, failureCallback) {\r\n      try {\r\n        const snapshot = await db.collection('turnos')\r\n          .where('fecha', '>=', fetchInfo.startStr)\r\n          .where('fecha', '<=', fetchInfo.endStr)\r\n          .get();\r\n        \r\n        const events = snapshot.docs.map(doc => {\r\n          const data = doc.data();\r\n          return {\r\n            id: doc.id,\r\n            title: `${data.cliente} - ${data.servicios.join(', ')}`,\r\n            start: `${data.fecha}T${data.horario}`,\r\n            allDay: false,\r\n            extendedProps: {\r\n              cliente: data.cliente,\r\n              telefono: data.telefono,\r\n              email: data.email,\r\n              servicios: data.servicios,\r\n              observaciones: data.observaciones,\r\n              estado: data.estado || 'pendiente'\r\n            },\r\n            className: `fc-event-${data.estado || 'pendiente'}`,\r\n            borderColor: 'transparent'\r\n          };\r\n        });\r\n        \r\n        successCallback(events);\r\n      } catch (error) {\r\n        console.error(\"Error cargando eventos:\", error);\r\n        failureCallback(error);\r\n      }\r\n    },\r\n    \r\n    eventClick: function(info) {\r\n      abrirModalEdicion(info.event);\r\n    },\r\n    \r\n    select: function(info) {\r\n      calendar.unselect();\r\n    },\r\n    \r\n    dayMaxEventRows: false,\r\n    views: {\r\n      dayGridMonth: {\r\n        dayMaxEventRows: false,\r\n        displayEventTime: false\r\n      },\r\n      timeGridWeek: {\r\n        dayMaxEventRows: true\r\n      },\r\n      timeGridDay: {\r\n        dayMaxEventRows: true\r\n      }\r\n    },\r\n    \r\n    // Limpiar selección al cambiar de vista\r\n    viewDidMount: function() {\r\n      document.querySelectorAll('.fc-daygrid-day-selected').forEach(el => {\r\n        el.classList.remove('fc-daygrid-day-selected');\r\n      });\r\n    }\r\n  });\r\n  \r\n  calendar.render();\r\n}\r\n\r\nfunction getEventColor(estado) {\r\n  switch(estado) {\r\n    case 'confirmado': return '#4CAF50';\r\n    case 'cancelado': return '#F44336';\r\n    case 'completado': return '#2196F3';\r\n    default: return '#FF9800';\r\n  }\r\n}\r\n\r\nasync function loadTurnosForDate(date) {\r\n  try {\r\n    // Corregir formato de fecha para el título\r\n    const fechaObj = new Date(date);\r\n    // Ajustar por zona horaria\r\n    const fechaAjustada = new Date(fechaObj.getTime() + fechaObj.getTimezoneOffset() * 60000);\r\n    \r\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n    elements.fechaTitulo.textContent = `Turnos para ${fechaAjustada.toLocaleDateString('es-AR', options)}`;\r\n    \r\n    const snapshot = await db.collection('turnos')\r\n      .where('fecha', '==', date)\r\n      .orderBy('horario', 'asc')\r\n      .get();\r\n    \r\n    renderTurnos(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n  } catch (error) {\r\n    console.error(\"Error cargando turnos:\", error);\r\n    elements.turnosList.innerHTML = '<p>Error al cargar los turnos. Intente nuevamente.</p>';\r\n  }\r\n}\r\n\r\nfunction renderTurnos(turnos) {\r\n  if (!elements.turnosList) return;\r\n  \r\n  if (turnos.length === 0) {\r\n    elements.turnosList.innerHTML = '<p class=\"sin-turnos\">No hay turnos para esta fecha.</p>';\r\n    return;\r\n  }\r\n  \r\n  elements.turnosList.innerHTML = turnos.map(turno => `\r\n    <div class=\"turno-card\" data-id=\"${turno.id}\">\r\n      <div class=\"turno-header\" data-id=\"${turno.id}\">\r\n        <div class=\"turno-sumario\">\r\n          <span class=\"turno-horario\">${turno.horario}</span>\r\n          <span class=\"turno-cliente\">${turno.cliente}</span>\r\n          <span class=\"turno-estado ${turno.estado || 'pendiente'}\">${turno.estado || 'pendiente'}</span>\r\n        </div>\r\n        <span class=\"toggle-icon\">▼</span>\r\n      </div>\r\n      <div class=\"turno-detalles\">\r\n        <div class=\"turno-info\">\r\n          <p><strong>Servicios:</strong> ${turno.servicios.join(', ')}</p>\r\n          <p><strong>Teléfono:</strong> ${turno.telefono}</p>\r\n          <p><strong>Email:</strong> ${turno.email}</p>\r\n          ${turno.observaciones ? `<p><strong>Observaciones:</strong> ${turno.observaciones}</p>` : ''}\r\n        </div>\r\n        <div class=\"turno-actions\">\r\n          <button class=\"btn-editar\" data-id=\"${turno.id}\">Editar</button>\r\n          <button class=\"btn-eliminar-lista\" data-id=\"${turno.id}\">Eliminar</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `).join('');\r\n  \r\n  // Configurar eventos para expandir/colapsar\r\n  document.querySelectorAll('.turno-header').forEach(header => {\r\n    header.addEventListener('click', function(e) {\r\n      // Evitar que se active si se hace click en un botón de acción\r\n      if (e.target.tagName === 'BUTTON') return;\r\n      \r\n      const card = this.closest('.turno-card');\r\n      const detalles = card.querySelector('.turno-detalles');\r\n      const icon = this.querySelector('.toggle-icon');\r\n      \r\n      card.classList.toggle('expanded');\r\n      detalles.style.display = card.classList.contains('expanded') ? 'block' : 'none';\r\n      icon.textContent = card.classList.contains('expanded') ? '▲' : '▼';\r\n    });\r\n  });\r\n  \r\n  // Configurar eventos para los botones eliminar (existente)\r\n  document.querySelectorAll('.btn-eliminar-lista').forEach(btn => {\r\n    btn.addEventListener('click', async (e) => {\r\n      e.stopPropagation();\r\n      const turnoId = e.currentTarget.getAttribute('data-id');\r\n      \r\n      if (confirm('¿Estás seguro de eliminar este turno?')) {\r\n        const loading = mostrarLoading();\r\n        try {\r\n          await eliminarTurno(turnoId);\r\n          const fechaActual = new Date().toISOString().split('T')[0];\r\n          await loadTurnosForDate(fechaActual);\r\n        } catch (error) {\r\n          console.error(\"Error eliminando desde lista:\", error);\r\n          alert(\"Error al eliminar el turno\");\r\n        } finally {\r\n          loading.remove();\r\n        }\r\n      }\r\n    });\r\n  });\r\n  \r\n  // Configurar eventos para los botones editar (existente)\r\n  document.querySelectorAll('.btn-editar').forEach(btn => {\r\n    btn.addEventListener('click', async (e) => {\r\n      e.stopPropagation();\r\n      const turnoId = e.currentTarget.getAttribute('data-id');\r\n      await abrirModalEdicionPorId(turnoId);\r\n    });\r\n  });\r\n}\r\n\r\nasync function abrirModalEdicion(event) {\r\n  try {\r\n    const config = await obtenerConfiguracion();\r\n    await generarOpcionesHorario(config);\r\n    \r\n    currentTurnoId = event.id;\r\n    \r\n    // Llenar solo los campos necesarios\r\n    document.getElementById('turno-id').value = event.id;\r\n    document.getElementById('edit-fecha').value = event.start.toISOString().split('T')[0];\r\n    \r\n    // Formatear hora (HH:MM)\r\n    const hora = event.start.getHours().toString().padStart(2, '0');\r\n    const minutos = event.start.getMinutes().toString().padStart(2, '0');\r\n    document.getElementById('edit-horario').value = `${hora}:${minutos}`;\r\n    \r\n    // Mostrar información del turno en el modal\r\n    document.getElementById('turno-info').innerHTML = `\r\n      <p><strong>Cliente:</strong> ${event.extendedProps.cliente}</p>\r\n      <p><strong>Servicios:</strong> ${event.extendedProps.servicios.join(', ')}</p>\r\n      <p><strong>Teléfono:</strong> ${event.extendedProps.telefono}</p>\r\n      <p><strong>Estado:</strong> ${event.extendedProps.estado || 'pendiente'}</p>\r\n    `;\r\n    \r\n    elements.modalEditar.style.display = 'block';\r\n  } catch (error) {\r\n    console.error(\"Error abriendo modal de edición:\", error);\r\n    alert(\"Error al cargar los datos del turno\");\r\n  }\r\n}\r\n\r\nasync function abrirModalEdicionPorId(turnoId) {\r\n  try {\r\n    const config = await obtenerConfiguracion();\r\n    await generarOpcionesHorario(config);\r\n    \r\n    const doc = await db.collection('turnos').doc(turnoId).get();\r\n    if (!doc.exists) {\r\n      alert('Turno no encontrado');\r\n      return;\r\n    }\r\n    \r\n    const turno = doc.data();\r\n    currentTurnoId = turnoId;\r\n    \r\n    // Llenar solo los campos necesarios para el formulario simplificado\r\n    document.getElementById('turno-id').value = turnoId;\r\n    document.getElementById('edit-fecha').value = turno.fecha;\r\n    document.getElementById('edit-horario').value = turno.horario;\r\n    \r\n    // Mostrar información del turno en el modal\r\n    document.getElementById('turno-info').innerHTML = `\r\n      <p><strong>Cliente:</strong> ${turno.cliente}</p>\r\n      <p><strong>Servicios:</strong> ${Array.isArray(turno.servicios) ? turno.servicios.join(', ') : turno.servicios}</p>\r\n      <p><strong>Teléfono:</strong> ${turno.telefono}</p>\r\n      <p><strong>Estado:</strong> ${turno.estado || 'pendiente'}</p>\r\n    `;\r\n    \r\n    // Configurar el botón eliminar del modal\r\n    const btnEliminarModal = document.getElementById('btn-eliminar-modal');\r\n    if (btnEliminarModal) {\r\n      btnEliminarModal.onclick = async (e) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        \r\n        if (confirm('¿Estás seguro de eliminar este turno permanentemente?')) {\r\n          try {\r\n            const success = await eliminarTurno(currentTurnoId);\r\n            if (success) {\r\n              // Actualizar la vista\r\n              await loadTurnosForDate(turno.fecha);\r\n              calendar.refetchEvents();\r\n              elements.modalEditar.style.display = 'none';\r\n              alert('Turno eliminado correctamente');\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error al eliminar turno:\", error);\r\n            alert(\"Error al eliminar el turno: \" + error.message);\r\n          }\r\n        }\r\n      };\r\n    }\r\n    \r\n    elements.modalEditar.style.display = 'block';\r\n  } catch (error) {\r\n    console.error(\"Error abriendo modal de edición:\", error);\r\n    alert(\"Error al cargar los datos del turno\");\r\n  }\r\n}\r\n\r\nfunction configurarModalEliminar() {\r\n  const btnEliminarModal = document.getElementById('btn-eliminar-modal');\r\n  if (!btnEliminarModal) return;\r\n\r\n  // Limpiar eventos previos\r\n  btnEliminarModal.onclick = null;\r\n  \r\n  // Asignar nuevo evento\r\n  btnEliminarModal.onclick = async (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    if (!currentTurnoId) {\r\n      console.error('No hay turno seleccionado');\r\n      return;\r\n    }\r\n\r\n    if (confirm('¿Estás seguro de eliminar este turno permanentemente?')) {\r\n      const loadingIndicator = mostrarLoading();\r\n      try {\r\n        await eliminarTurno(currentTurnoId);\r\n      } catch (error) {\r\n        console.error(\"Error en eliminación:\", error);\r\n      } finally {\r\n        loadingIndicator.remove();\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction mostrarLoading() {\r\n  const loading = document.createElement('div');\r\n  loading.className = 'loading-indicator';\r\n  loading.textContent = 'Procesando...';\r\n  document.body.appendChild(loading);\r\n  return loading;\r\n}\r\n\r\nasync function generarOpcionesHorario(config) {\r\n  const selectHorario = document.getElementById('edit-horario');\r\n  selectHorario.innerHTML = '';\r\n  \r\n  // Convertir horarios de apertura/cierre a minutos\r\n  const [aperturaH, aperturaM] = config.horarioApertura.split(':').map(Number);\r\n  const [cierreH, cierreM] = config.horarioCierre.split(':').map(Number);\r\n  \r\n  let horaActual = aperturaH;\r\n  let minutoActual = aperturaM;\r\n  \r\n  while (horaActual < cierreH || (horaActual === cierreH && minutoActual < cierreM)) {\r\n    const horaStr = horaActual.toString().padStart(2, '0');\r\n    const minutoStr = minutoActual.toString().padStart(2, '0');\r\n    const option = document.createElement('option');\r\n    option.value = `${horaStr}:${minutoStr}`;\r\n    option.textContent = `${horaStr}:${minutoStr}`;\r\n    selectHorario.appendChild(option);\r\n    \r\n    // Avanzar el tiempo\r\n    minutoActual += config.duracionTurno;\r\n    if (minutoActual >= 60) {\r\n      horaActual += Math.floor(minutoActual / 60);\r\n      minutoActual = minutoActual % 60;\r\n    }\r\n  }\r\n}\r\n\r\nasync function verificarDisponibilidad(fecha, horario, turnoId = null) {\r\n  try {\r\n    const config = await obtenerConfiguracion();\r\n    \r\n    // Convertir horario a minutos\r\n    const [hora, minuto] = horario.split(':').map(Number);\r\n    const inicioEnMinutos = hora * 60 + minuto;\r\n    const finEnMinutos = inicioEnMinutos + config.duracionTurno;\r\n    \r\n    // Convertir a formato HH:MM para la consulta\r\n    const horarioFin = `${Math.floor(finEnMinutos / 60).toString().padStart(2, '0')}:${(finEnMinutos % 60).toString().padStart(2, '0')}`;\r\n    \r\n    // Consultar todos los turnos para la fecha\r\n    let query = db.collection('turnos').where('fecha', '==', fecha);\r\n    \r\n    const snapshot = await query.get();\r\n    \r\n    // Filtrar localmente los turnos que se solapan\r\n    const turnosSolapados = snapshot.docs.filter(doc => {\r\n      // Si estamos editando, excluir el turno actual\r\n      if (turnoId && doc.id === turnoId) return false;\r\n      \r\n      const turno = doc.data();\r\n      const [turnoHora, turnoMinuto] = turno.horario.split(':').map(Number);\r\n      const turnoInicio = turnoHora * 60 + turnoMinuto;\r\n      const turnoFin = turnoInicio + config.duracionTurno;\r\n      \r\n      // Verificar solapamiento\r\n      return (inicioEnMinutos < turnoFin && finEnMinutos > turnoInicio);\r\n    });\r\n    \r\n    return {\r\n      disponible: turnosSolapados.length === 0,\r\n      mensaje: turnosSolapados.length > 0 ? `El horario se solapa con otro turno existente` : null\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error verificando disponibilidad:\", error);\r\n    return {\r\n      disponible: false,\r\n      mensaje: \"Error al verificar disponibilidad\"\r\n    };\r\n  }\r\n}\r\n\r\nasync function guardarCambiosTurno() {\r\n  if (!currentTurnoId) {\r\n    console.error('currentTurnoId no definido');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const user = firebase.auth().currentUser;\r\n    if (!user || user.uid !== ADMIN_UID) {\r\n      alert('No tienes permisos para realizar esta acción');\r\n      return;\r\n    }\r\n\r\n    const config = await obtenerConfiguracion();\r\n    const horario = document.getElementById('edit-horario').value;\r\n    const fechaInput = document.getElementById('edit-fecha').value;\r\n    \r\n    // Debug: Mostrar información de validación\r\n    console.log(\"Validando turno para:\", fechaInput, horario);\r\n    console.log(\"Configuración actual:\", config);\r\n\r\n    // Validar horario\r\n    const validacionHorario = validarHorario(horario, config);\r\n    if (!validacionHorario.valido) {\r\n      alert(validacionHorario.mensaje);\r\n      return;\r\n    }\r\n    \r\n    // Crear fecha sin problemas de zona horaria (formato YYYY-MM-DD)\r\n    const [year, month, day] = fechaInput.split('-').map(Number);\r\n    const fechaObj = new Date(year, month - 1, day);\r\n    \r\n    // Obtener día de la semana (0=Domingo, 1=Lunes, ..., 6=Sábado)\r\n    const diaSemana = fechaObj.getDay();\r\n    \r\n    // Debug: Verificar valores\r\n    console.log(\"Fecha seleccionada:\", fechaInput);\r\n    console.log(\"Día de la semana calculado:\", diaSemana);\r\n    console.log(\"Días laborales configurados:\", config.diasLaborales);\r\n    \r\n    // Validar día laboral\r\n    if (!config.diasLaborales.includes(diaSemana)) {\r\n      const diasNombres = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];\r\n      alert(`No se pueden agendar turnos los ${diasNombres[diaSemana]}s`);\r\n      return;\r\n    }\r\n    \r\n    // Verificar disponibilidad\r\n    const disponibilidad = await verificarDisponibilidad(fechaInput, horario, currentTurnoId);\r\n    if (!disponibilidad.disponible) {\r\n      alert(disponibilidad.mensaje);\r\n      return;\r\n    }\r\n    \r\n    // Solo actualizar fecha y horario\r\n    const turnoActualizado = {\r\n      fecha: fechaInput,\r\n      horario: horario,\r\n      actualizadoEl: firebase.firestore.FieldValue.serverTimestamp()\r\n    };\r\n    \r\n    await db.collection('turnos').doc(currentTurnoId).update(turnoActualizado);\r\n    \r\n    // Actualizar la vista\r\n    await loadTurnosForDate(fechaInput);\r\n    if (calendar) {\r\n      calendar.refetchEvents();\r\n    }\r\n    elements.modalEditar.style.display = 'none';\r\n    \r\n    alert('Turno actualizado correctamente');\r\n  } catch (error) {\r\n    console.error(\"Error actualizando turno:\", error);\r\n    alert(\"Error al actualizar el turno: \" + error.message);\r\n  }\r\n}\r\n\r\nasync function eliminarTurno(turnoId) {\r\n  // Validación mejorada del ID\r\n  if (!turnoId || typeof turnoId !== 'string') {\r\n    console.error('ID de turno inválido:', turnoId);\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    console.log('Iniciando eliminación para ID:', turnoId);\r\n    \r\n    // Obtener la fecha del turno antes de eliminarlo\r\n    const doc = await db.collection('turnos').doc(turnoId).get();\r\n    if (!doc.exists) {\r\n      alert('El turno ya no existe');\r\n      return false;\r\n    }\r\n    \r\n    const fechaTurno = doc.data().fecha;\r\n    \r\n    // Eliminar el documento\r\n    await db.collection('turnos').doc(turnoId).delete();\r\n    console.log('Turno eliminado con éxito');\r\n    \r\n    // Actualizar la vista\r\n    await loadTurnosForDate(fechaTurno);\r\n    \r\n    // Refrescar calendario\r\n    if (calendar) {\r\n      calendar.refetchEvents();\r\n    }\r\n    \r\n    // Cerrar modal si está abierto\r\n    if (elements.modalEditar) {\r\n      elements.modalEditar.style.display = 'none';\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al eliminar:', error);\r\n    alert('Error al eliminar el turno: ' + (error.message || 'Por favor intente nuevamente'));\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction setupModalEvents() {\r\n  const modal = document.getElementById('modal-editar');\r\n  const btnEliminar = document.getElementById('btn-eliminar-modal');\r\n  \r\n  if (btnEliminar) {\r\n    btnEliminar.onclick = async (e) => {\r\n      e.stopPropagation(); // Detener la propagación\r\n      e.preventDefault(); // Prevenir comportamiento por defecto\r\n      \r\n      if (!currentTurnoId) {\r\n        console.error('No hay turno seleccionado');\r\n        return;\r\n      }\r\n\r\n      if (confirm('¿Estás seguro de eliminar este turno permanentemente?')) {\r\n        try {\r\n          const success = await eliminarTurno(currentTurnoId);\r\n          if (success) {\r\n            // Actualizar la vista\r\n            const fechaActual = new Date().toISOString().split('T')[0];\r\n            await loadTurnosForDate(fechaActual);\r\n            calendar.refetchEvents();\r\n            modal.style.display = 'none';\r\n            alert('Turno eliminado correctamente');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error en el proceso de eliminación:', error);\r\n          alert('Error al eliminar el turno: ' + (error.message || 'Por favor intente nuevamente'));\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', initAdmin);","(() => {\r\n  window.enviarEmailConfirmacion = async (datosTurno) => {\r\n    try {\r\n      const emailData = {\r\n        senderName: window.brevoConfig.senderName,\r\n        senderEmail: window.brevoConfig.senderEmail,\r\n        to: [{ email: datosTurno.email, name: datosTurno.nombre }],\r\n        subject: `Confirmación de turno - ${datosTurno.fecha} a las ${datosTurno.horario}`,\r\n        htmlContent: `\r\n          <!DOCTYPE html>\r\n          <html>\r\n          <head>\r\n              <style>\r\n                  body { font-family: 'Poppins', sans-serif; line-height: 1.6; color: #333; }\r\n                  .container { max-width: 600px; margin: 0 auto; padding: 20px; }\r\n                  .header { background-color: #f8f1e9; padding: 20px; text-align: center; }\r\n                  .content { padding: 20px; }\r\n                  .footer { text-align: center; font-size: 12px; color: #777; margin-top: 20px; }\r\n                  .resumen { margin-top: 20px; border-top: 1px solid #eee; padding-top: 20px; }\r\n                  .servicio { margin-bottom: 5px; }\r\n              </style>\r\n          </head>\r\n          <body>\r\n              <div class=\"container\">\r\n                  <div class=\"header\">\r\n                      <h2>Esvelta Peluquería</h2>\r\n                      <p>¡Tu turno ha sido confirmado!</p>\r\n                  </div>\r\n                  \r\n                  <div class=\"content\">\r\n                      <p>Hola <strong>${datosTurno.nombre}</strong>,</p>\r\n                      <p>Tu turno ha sido reservado con éxito. A continuación los detalles:</p>\r\n                      \r\n                      <div class=\"resumen\">\r\n                          <h3>Resumen de tu reserva</h3>\r\n                          <p><strong>Fecha:</strong> ${datosTurno.fecha}</p>\r\n                          <p><strong>Hora:</strong> ${datosTurno.horario}</p>\r\n                          <p><strong>Servicios:</strong></p>\r\n                          <ul>\r\n                              ${datosTurno.servicios.map(s => `<li class=\"servicio\">${s}</li>`).join('')}\r\n                          </ul>\r\n                          <p><strong>Seña abonada:</strong> $${datosTurno.reserva.toLocaleString()}</p>\r\n                          <p><strong>Saldo pendiente:</strong> $${(datosTurno.montoTotal - datosTurno.reserva).toLocaleString()}</p>\r\n                      </div>\r\n                      \r\n                      <p>Si necesitas modificar o cancelar tu turno, por favor contáctanos respondiendo este email.</p>\r\n                  </div>\r\n                  \r\n                  <div class=\"footer\">\r\n                      <p>© ${new Date().getFullYear()} Esvelta Peluquería. Todos los derechos reservados.</p>\r\n                  </div>\r\n              </div>\r\n          </body>\r\n          </html>\r\n        `\r\n      };\r\n\r\n      // Opcional: enviar copia al admin\r\n      if (window.brevoConfig.adminEmail) {\r\n        emailData.bcc = [{ email: window.brevoConfig.adminEmail, name: 'Administrador Esvelta' }];\r\n      }\r\n\r\n      // Llamar a la Cloud Function\r\n      const enviarEmail = firebase.functions().httpsCallable('enviarEmailConfirmacion');\r\n      const resultado = await enviarEmail(emailData);\r\n      \r\n      return resultado.data.success;\r\n    } catch (error) {\r\n      console.error('Error en enviarEmailConfirmacion:', error);\r\n      return false;\r\n    }\r\n  };\r\n})();","// Variables globales\r\nlet pasoActual = 1;\r\nconst totalPasos = 5; // Ahora son 5 pasos antes de confirmación\r\nlet datosReserva = {\r\n    servicios: [],\r\n    precios: {\r\n        \"Corte\": 15000,\r\n        \"Teñido\": 40000,\r\n        \"Alisado\": 30000\r\n    },\r\n    duraciones: {\r\n      \"Corte\": 30,\r\n      \"Teñido\": 30,\r\n      \"Alisado\": 30\r\n    },\r\n    reserva: 5000,\r\n    fecha: null,\r\n    horario: null,\r\n    nombre: null,\r\n    email: null,\r\n    telefono: null,\r\n    observacion: null\r\n};\r\n\r\nlet usuarioActual = null;\r\n\r\n// Elementos DOM\r\nconst elementos = {\r\n    progreso: document.getElementById('progreso'),\r\n    btnAnterior: document.querySelector('.btn-anterior'),\r\n    btnSiguiente: document.querySelector('.btn-siguiente'),\r\n    pasos: document.querySelectorAll('.paso'),\r\n    // Elementos de resumen\r\n    resumenNombre: document.getElementById('cliente-nombre'),\r\n    resumenEmail: document.getElementById('cliente-email'),\r\n    resumenTelefono: document.getElementById('cliente-telefono'),\r\n    resumenServicio: document.getElementById('servicio-seleccionado'),\r\n    resumenFecha: document.getElementById('fecha-seleccionada'),\r\n    resumenHorario: document.getElementById('horario-seleccionado'),\r\n    resumenObservacion: document.getElementById('observacion-texto')\r\n};\r\n\r\n// Usar las referencias globales con validación\r\nconst auth = window.firebaseAuth || {\r\n  onAuthStateChanged: () => console.warn('Auth no inicializado'),\r\n  // otras funciones mock para desarrollo\r\n};\r\n\r\nif (!window.firestoreDB) {\r\n  console.error('Firestore no está disponible');\r\n  // Podrías mostrar un mensaje al usuario o deshabilitar funcionalidad\r\n}\r\n\r\n// Prueba de conexión (puedes eliminar esto después)\r\nasync function probarConexion() {\r\n  try {\r\n    // console.log(\"Probando conexión a Firestore...\");\r\n    \r\n    // 1. Obtener configuración\r\n    const config = await firestoreDB.obtenerConfiguracion();\r\n    // console.log(\"Configuración obtenida:\", config);\r\n    \r\n    // 2. Obtener turnos de hoy\r\n    const hoy = new Date().toISOString().split('T')[0];\r\n    const turnos = await firestoreDB.obtenerTurnosPorFecha(hoy);\r\n    // console.log(`Turnos para hoy (${hoy}):`, turnos);\r\n    \r\n    // 3. Generar horarios disponibles para hoy\r\n    const horarios = await firestoreDB.generarHorariosDisponibles(hoy);\r\n    // console.log(\"Horarios disponibles hoy:\", horarios);\r\n    \r\n  } catch (error) {\r\n    console.error(\"Error en prueba de conexión:\", error);\r\n  }\r\n}\r\n\r\n// Inicialización\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n  // Verificar si hay usuario en LocalStorage\r\n  const usuarioLS = localStorage.getItem('usuario');\r\n  if (usuarioLS) {\r\n    const user = JSON.parse(usuarioLS);\r\n    actualizarUIUsuario(user);\r\n  }\r\n\r\n  if (document.querySelector('.contenedor-pasos')) {\r\n    probarConexion();\r\n    inicializarEventos();\r\n    actualizarInterfaz();\r\n    inicializarAuth();\r\n    inicializarDisponibilidad();\r\n  }\r\n});\r\n\r\nfunction mostrarError(mensaje) {\r\n    document.querySelectorAll('.modal-error, .modal-overlay').forEach(el => el.remove());\r\n    \r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'modal-overlay';\r\n    \r\n    const modal = document.createElement('div');\r\n    modal.className = 'modal-error';\r\n    \r\n    let mensajePersonalizado = mensaje;\r\n    \r\n    // Detectar conflictos de horario\r\n    if (mensaje.includes('minutos') || mensaje.includes('horario')) {\r\n        const duracionTotal = calcularDuracionTotal();\r\n        const horas = Math.floor(duracionTotal / 60);\r\n        const minutos = duracionTotal % 60;\r\n        \r\n        const textoDuracion = horas > 0 \r\n            ? `${horas} hora${horas > 1 ? 's' : ''}${minutos > 0 ? ` y ${minutos} minutos` : ''}`\r\n            : `${minutos} minutos`;\r\n        \r\n        mensajePersonalizado = `\r\n            <svg viewBox=\"0 0 24 24\" width=\"48\" height=\"48\" style=\"margin-bottom: 1rem;\">\r\n                <path fill=\"#ff6b6b\" d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/>\r\n            </svg>\r\n            <h3>¡Cruce de horarios!</h3>\r\n            <p>\r\n                Tu turno necesita <strong>${textoDuracion}</strong> como mínimo.\r\n                <br><br>\r\n                Por favor, elegí otro horario donde entren todos tus servicios.\r\n            </p>\r\n        `;\r\n    }\r\n    \r\n    modal.innerHTML = `\r\n        ${mensajePersonalizado}\r\n        <button id=\"cerrar-modal\">¡Entendido!</button>\r\n    `;\r\n    \r\n    // Agregar al DOM\r\n    document.body.appendChild(overlay);\r\n    document.body.appendChild(modal);\r\n    \r\n    // Cerrar al hacer clic\r\n    const cerrarModal = () => {\r\n        modal.style.animation = 'fadeIn 0.3s reverse';\r\n        overlay.style.animation = 'fadeIn 0.3s reverse';\r\n        setTimeout(() => {\r\n            modal.remove();\r\n            overlay.remove();\r\n        }, 300);\r\n    };\r\n    \r\n    modal.querySelector('#cerrar-modal').addEventListener('click', cerrarModal);\r\n    overlay.addEventListener('click', cerrarModal);\r\n}\r\n\r\n// Funciones principales\r\nfunction inicializarEventos() {\r\n    // Navegación\r\n    elementos.btnAnterior.addEventListener('click', retrocederPaso);\r\n    elementos.btnSiguiente.addEventListener('click', avanzarPaso);\r\n    \r\n    // Selección de servicios (manejo delegado)\r\n    document.querySelectorAll('.flotante.servicio').forEach(servicio => {\r\n        servicio.addEventListener('click', function() {\r\n            this.classList.toggle('seleccionado');\r\n            actualizarServiciosSeleccionados();\r\n        });\r\n    });\r\n    \r\n    // Fechas y horarios\r\n    document.querySelectorAll('.flotante.fecha').forEach(fecha => {\r\n        fecha.addEventListener('click', function() {\r\n            seleccionarElemento(this, 'fecha');\r\n        });\r\n    });\r\n    \r\n    document.querySelectorAll('.flotante.horario').forEach(horario => {\r\n        horario.addEventListener('click', async function() {\r\n            if (!this.classList.contains('ocupado')) {\r\n            const horarioSeleccionado = this.querySelector('.p1').textContent;\r\n            const validacion = await validarDisponibilidadCompleta(\r\n                datosReserva.fecha, \r\n                horarioSeleccionado\r\n            );\r\n            \r\n            if (validacion.disponible && validacion.turnosSolapados.length === 0) {\r\n                seleccionarElemento(this, 'horario');\r\n            } else {\r\n                mostrarError(validacion.mensaje || \"Horario no disponible\");\r\n            }\r\n            }\r\n        });\r\n    });\r\n    \r\n    // Validación en tiempo real\r\n    document.getElementById('nombre')?.addEventListener('input', validarNombre);\r\n    document.getElementById('email')?.addEventListener('input', validarEmail);\r\n    document.getElementById('telefono')?.addEventListener('input', validarTelefono);\r\n}\r\n\r\nfunction calcularSubtotal() {\r\n    const subtotal = datosReserva.servicios.reduce((total, servicio) => total + servicio.precio, 0);\r\n    document.getElementById('subtotal').textContent = `$${subtotal.toLocaleString()}`;\r\n    return subtotal;\r\n}\r\n\r\nfunction actualizarServiciosSeleccionados() {\r\n    const serviciosSeleccionados = document.querySelectorAll('.flotante.servicio.seleccionado');\r\n    datosReserva.servicios = Array.from(serviciosSeleccionados).map(serv => {\r\n        return {\r\n            nombre: serv.getAttribute('data-servicio'),\r\n            precio: datosReserva.precios[serv.getAttribute('data-servicio')],\r\n            duracion: datosReserva.duraciones[serv.getAttribute('data-servicio')]\r\n        };\r\n    });\r\n    \r\n    // Actualizar contador\r\n    document.getElementById('contador-servicios').textContent = datosReserva.servicios.length;\r\n    \r\n    // Ocultar error si hay selección\r\n    if (datosReserva.servicios.length > 0) {\r\n        document.getElementById('error-servicio').classList.remove('visible');\r\n    }\r\n    \r\n    // Calcular y mostrar subtotal\r\n    calcularSubtotal();\r\n    \r\n    console.log('Servicios seleccionados:', datosReserva.servicios);\r\n    console.log('Duración total estimada:', calcularDuracionTotal(), 'minutos');\r\n}\r\n\r\nfunction calcularDuracionTotal() {\r\n    return datosReserva.servicios.reduce((total, servicio) => total + servicio.duracion, 0);\r\n}\r\n\r\nasync function avanzarPaso() {\r\n    if (pasoActual >= totalPasos) return;\r\n    \r\n    try {\r\n        // Mostrar spinner\r\n        toggleLoader(true);\r\n        \r\n        const pasoValido = await validarPaso(pasoActual);\r\n        if (!pasoValido) {\r\n            toggleLoader(false);\r\n            return;\r\n        }\r\n\r\n        pasoActual++;\r\n        actualizarInterfaz();\r\n        \r\n        if (pasoActual === 4 && usuarioActual) {\r\n            autocompletarFormulario(usuarioActual);\r\n        }\r\n        \r\n        if (pasoActual === 5) {\r\n            guardarDatosFormulario();\r\n            actualizarResumen();\r\n        }\r\n    } catch (error) {\r\n        console.error('Error al avanzar paso:', error);\r\n        mostrarError('Ocurrió un error al validar los datos');\r\n    } finally {\r\n        // Ocultar spinner siempre, tanto en éxito como en error\r\n        toggleLoader(false);\r\n    }\r\n}\r\n\r\nfunction retrocederPaso() {\r\n    if (pasoActual > 1) {\r\n        switch (pasoActual) {\r\n            case 2: // Si estamos en fechas y retrocedemos a servicios\r\n                // No necesitamos limpiar nada específico\r\n                break;\r\n                \r\n            case 3: // Si estamos en horarios y retrocedemos a fechas\r\n                limpiarSeleccion('horario');\r\n                datosReserva.horario = null;\r\n                break;\r\n                \r\n            case 4:\r\n                break;\r\n                \r\n            case 5:\r\n                break;\r\n        }\r\n        \r\n        pasoActual--;\r\n        actualizarInterfaz();\r\n    }\r\n}\r\n\r\nfunction limpiarSeleccion(tipo) {\r\n    document.querySelectorAll(`.flotante.${tipo}.seleccionado`).forEach(elemento => {\r\n        elemento.classList.remove('seleccionado');\r\n    });\r\n    \r\n    const errorElement = document.getElementById(`error-${tipo}`);\r\n    if (errorElement) {\r\n        errorElement.classList.remove('visible');\r\n    }\r\n    \r\n    console.log(`Selección de ${tipo} limpiada al retroceder`);\r\n}\r\n\r\nfunction actualizarInterfaz() {\r\n    actualizarPasos();\r\n    actualizarProgreso();\r\n    actualizarBotones();\r\n}\r\n\r\nasync function simularReserva() {\r\n  if (pasoActual === totalPasos) {\r\n        const loader = document.getElementById('reserva-loader');\r\n        const btnSiguiente = document.querySelector('.btn-siguiente');\r\n        const duracionTotal = calcularDuracionTotal();\r\n\r\n        btnSiguiente.classList.add('hidden');\r\n        setTimeout(() => {\r\n            loader.style.display = 'inline-block';\r\n        }, 200);\r\n\r\n        // Validación completa\r\n        const validacion = await validarDisponibilidadCompleta(\r\n            datosReserva.fecha, \r\n            datosReserva.horario,\r\n            duracionTotal\r\n        );\r\n\r\n        if (!validacion.disponible) {\r\n            requestAnimationFrame(() => {\r\n                loader.style.display = 'none';\r\n                btnSiguiente.style.display = 'flex';\r\n            });\r\n            \r\n            console.error('Validación fallida:', validacion);\r\n            mostrarError(validacion.mensaje || \"El horario ya no está disponible\");\r\n            return;\r\n        }\r\n\r\n    try {\r\n      // Validar disponibilidad\r\n      const disponible = await firestoreDB.verificarDisponibilidad(\r\n        datosReserva.fecha, \r\n        datosReserva.horario\r\n      );\r\n      \r\n      if (!disponible) {\r\n        mostrarConfirmacion(false);\r\n        return;\r\n      }\r\n  \r\n      // Crear objeto de turno\r\n      const turnoData = {\r\n        cliente: datosReserva.nombre,\r\n        email: datosReserva.email,\r\n        telefono: datosReserva.telefono,\r\n        servicios: datosReserva.servicios.map(s => s.nombre),\r\n        fecha: datosReserva.fecha,\r\n        horario: datosReserva.horario,\r\n        montoTotal: calcularSubtotal(),\r\n        reserva: datosReserva.reserva,\r\n        observaciones: datosReserva.observacion || '',\r\n        userId: usuarioActual?.uid || null,\r\n        duracion: duracionTotal\r\n      };\r\n  \r\n      // Guardar en Firestore\r\n      await firestoreDB.guardarTurno(turnoData);\r\n      \r\n      // Enviar email de confirmación (no esperamos respuesta para no bloquear la UI)\r\n      enviarEmailConfirmacion({\r\n        ...turnoData,\r\n        nombre: datosReserva.nombre,\r\n        servicios: datosReserva.servicios.map(s => s.nombre)\r\n      }).then(enviado => {\r\n        if (!enviado) {\r\n          console.log(\"El email no pudo enviarse, pero el turno fue reservado\");\r\n        }\r\n      });\r\n\r\n      // Ocultar spinner después de la reserva exitosa\r\n      loader.style.display = 'none';\r\n      \r\n      // Mostrar confirmación\r\n      mostrarConfirmacion(true);\r\n      \r\n    } catch (error) {\r\n      console.error('Error al reservar:', error);\r\n      // Restaurar UI si hay error\r\n      requestAnimationFrame(() => {\r\n        loader.style.display = 'none';\r\n        btnSiguiente.style.display = 'flex'; // Usar display original del botón\r\n      });\r\n      mostrarConfirmacion(false);\r\n    }\r\n  }\r\n}\r\n\r\nasync function completarReserva() {\r\n  let bloqueoId = null;\r\n  \r\n  try {\r\n    // 1. Crear bloqueo (con ID automático)\r\n    bloqueoId = await firestoreDB.bloquearTurnoTemporal(\r\n      datosReserva.fecha,\r\n      datosReserva.horario,\r\n      usuarioActual?.uid || 'anonimo'\r\n    );\r\n\r\n    // 2. Validación final\r\n    const config = await firestoreDB.obtenerConfiguracion();\r\n    const [disponible, turnosSolapados] = await Promise.all([\r\n      firestoreDB.verificarDisponibilidad(datosReserva.fecha, datosReserva.horario),\r\n      firestoreDB.obtenerTurnosSolapados(\r\n        datosReserva.fecha, \r\n        datosReserva.horario,\r\n        config.duracionTurno\r\n      )\r\n    ]);\r\n\r\n    if (!disponible || turnosSolapados.length > 0) {\r\n      await firestoreDB.eliminarBloqueoTemporal(bloqueoId);\r\n      mostrarError(turnosSolapados.length > 0 \r\n        ? `El horario se solapa con un turno existente (${turnosSolapados[0].servicios.join(', ')})`\r\n        : \"El horario ya fue reservado\");\r\n      return;\r\n    }\r\n\r\n    // 3. Guardar turno\r\n    const turnoData = { /* ... tus datos de turno ... */ };\r\n    await firestoreDB.guardarTurno(turnoData);\r\n\r\n    // 4. Limpiar bloqueo\r\n    await firestoreDB.eliminarBloqueoTemporal(bloqueoId);\r\n\r\n    mostrarConfirmacion(true);\r\n  } catch (error) {\r\n    console.error(\"Error en reserva:\", error);\r\n    if (bloqueoId) {\r\n      await firestoreDB.eliminarBloqueoTemporal(bloqueoId).catch(e => console.error(\"Error limpiando bloqueo:\", e));\r\n    }\r\n    mostrarConfirmacion(false);\r\n  }\r\n}\r\n\r\n// Simular disponibilidad de turnos\r\nasync function inicializarDisponibilidad() {\r\n  try {\r\n    const config = await firestoreDB.obtenerConfiguracion();\r\n    // console.log(\"Configuración procesada:\", {\r\n    //   apertura: config.horarioApertura,\r\n    //   cierre: config.horarioCierre,\r\n    //   diasLaborales: config.diasLaborales,\r\n    //   diasNoLaborables: config.diasNoLaborables\r\n    // });\r\n\r\n    const fechasDisponibles = generarFechasDisponibles(config);\r\n    // console.log(\"Fechas generadas:\", fechasDisponibles);\r\n    \r\n    actualizarUIFechas(fechasDisponibles);\r\n  } catch (error) {\r\n    console.error(\"Error inicializando disponibilidad:\", error);\r\n    mostrarError(\"No se pudieron cargar las fechas disponibles\");\r\n  }\r\n}\r\n\r\nasync function validarDisponibilidadCompleta(fecha, horario, duracion) {\r\n    try {\r\n        const config = await firestoreDB.obtenerConfiguracion();\r\n        \r\n        // Convertir horario de inicio a minutos\r\n        const [horaStr, minutoStr] = horario.split(':');\r\n        const horaInicio = parseInt(horaStr);\r\n        const minutoInicio = parseInt(minutoStr);\r\n        const inicioMinutos = horaInicio * 60 + minutoInicio;\r\n        const finMinutos = inicioMinutos + duracion;\r\n        \r\n        // Obtener todos los turnos del día\r\n        const turnosDelDia = await firestoreDB.obtenerTurnosPorFecha(fecha);\r\n        \r\n        // Verificar solapamientos\r\n        const turnosSolapados = turnosDelDia.filter(turno => {\r\n            const [turnoHora, turnoMinuto] = turno.horario.split(':').map(Number);\r\n            const turnoInicioMin = turnoHora * 60 + turnoMinuto;\r\n            const turnoFinMin = turnoInicioMin + (turno.duracion || 30);\r\n            \r\n            // Verificar solapamiento\r\n            return !(finMinutos <= turnoInicioMin || inicioMinutos >= turnoFinMin);\r\n        });\r\n        \r\n        // Verificar disponibilidad de cada slot individual\r\n        const slotsOcupados = [];\r\n        for (let min = inicioMinutos; min < finMinutos; min += 30) {\r\n            const hora = Math.floor(min / 60);\r\n            const minuto = min % 60;\r\n            const horarioSlot = `${hora.toString().padStart(2, '0')}:${minuto.toString().padStart(2, '0')}`;\r\n            \r\n            const disponible = await firestoreDB.verificarDisponibilidad(fecha, horarioSlot);\r\n            if (!disponible) {\r\n                slotsOcupados.push(horarioSlot);\r\n            }\r\n        }\r\n        \r\n        const disponible = turnosSolapados.length === 0 && slotsOcupados.length === 0;\r\n        \r\n        console.log(`Validación completa para ${horario} (${duracion} min):`, {\r\n            disponible,\r\n            turnosSolapados: turnosSolapados.map(t => t.horario),\r\n            slotsOcupados\r\n        });\r\n\r\n        let mensaje = '';\r\n        if (!disponible) {\r\n            const horas = Math.floor(duracion / 60);\r\n            const minutos = duracion % 60;\r\n            \r\n            mensaje = `Tu turno necesita ${horas > 0 ? horas + ' hora' + (horas > 1 ? 's' : '') + ' y ' : ''}${minutos} minutos continuos.`;\r\n        }\r\n        \r\n        return {\r\n            disponible,\r\n            turnosSolapados,\r\n            slotsOcupados,\r\n            mensaje\r\n        };\r\n    } catch (error) {\r\n        console.error(\"Error en validación:\", error);\r\n        return {\r\n            disponible: false,\r\n            turnosSolapados: [],\r\n            slotsOcupados: [],\r\n            mensaje: \"Error al verificar disponibilidad. Por favor, intenta nuevamente.\"\r\n        };\r\n    }\r\n}\r\n\r\n// Nueva función para generar fechas disponibles\r\nfunction generarFechasDisponibles(config) {\r\n  // Obtener fecha y hora actual en Argentina (UTC-3)\r\n  const ahoraArg = new Date(new Date().toLocaleString(\"en-US\", {timeZone: \"America/Argentina/Buenos_Aires\"}));\r\n  const hoyArg = new Date(ahoraArg.getFullYear(), ahoraArg.getMonth(), ahoraArg.getDate());\r\n  \r\n  // Verificar si ya pasó el horario de cierre (usando hora Argentina)\r\n  const [horaCierre, minCierre] = config.horarioCierre.split(':').map(Number);\r\n  const empezarDesdeManana = ahoraArg.getHours() > horaCierre || \r\n                       (ahoraArg.getHours() === horaCierre && ahoraArg.getMinutes() >= minCierre);\r\n\r\n  const fechasDisponibles = [];\r\n  const DIAS_A_MOSTRAR = 7;\r\n  \r\n  // Comenzar desde hoy o mañana según horario\r\n  const diaInicial = empezarDesdeManana ? 1 : 0;\r\n  \r\n  for (let i = diaInicial; i < DIAS_A_MOSTRAR + diaInicial; i++) {\r\n    const fecha = new Date(hoyArg);\r\n    fecha.setDate(hoyArg.getDate() + i);\r\n    \r\n    // Verificar día laboral (usando fecha Argentina)\r\n    if (!esDiaLaboral(fecha, config)) {\r\n      // console.log(`Saltando ${fecha.toDateString()} - No es día laboral`);\r\n      continue;\r\n    }\r\n    \r\n    const fechaStr = fecha.toISOString().split('T')[0];\r\n    \r\n    // Verificar días no laborables\r\n    if (Array.isArray(config.diasNoLaborables) && config.diasNoLaborables.includes(fechaStr)) {\r\n      // console.log(`Saltando ${fechaStr} - Día no laborable configurado`);\r\n      continue;\r\n    }\r\n    \r\n    // No agregar hoy si ya pasó el horario de cierre\r\n    if (i === 0 && empezarDesdeManana) continue;\r\n    \r\n    fechasDisponibles.push({\r\n      fecha: fechaStr,\r\n      display: formatearFechaDisplay(fecha)\r\n    });\r\n  }\r\n  \r\n  // console.log(\"Fechas disponibles generadas:\", fechasDisponibles);\r\n  return fechasDisponibles;\r\n}\r\n\r\nfunction esDiaLaboral(fecha, config) {\r\n  const diaSemana = fecha.getDay(); // 0=Domingo, 1=Lunes, etc.\r\n  \r\n  // Asegurarnos que diasLaborales es un array de números válidos\r\n  let diasLaborales = [];\r\n  \r\n  try {\r\n    if (Array.isArray(config.diasLaborales)) {\r\n      diasLaborales = config.diasLaborales.map(Number).filter(n => !isNaN(n));\r\n    } else if (typeof config.diasLaborales === 'string') {\r\n      diasLaborales = config.diasLaborales.split(',').map(Number).filter(n => !isNaN(n));\r\n    }\r\n  } catch (e) {\r\n    console.error(\"Error procesando días laborales:\", e);\r\n    diasLaborales = [1,2,3,4,5]; // Valor por defecto: Lunes a Viernes\r\n  }\r\n  \r\n  // Si no hay días definidos, usar valor por defecto\r\n  if (diasLaborales.length === 0) {\r\n    diasLaborales = [1,2,3,4,5];\r\n  }\r\n  \r\n  return diasLaborales.includes(diaSemana);\r\n}\r\n\r\nfunction formatearFechaDisplay(fecha) {\r\n  return fecha.toLocaleDateString('es-AR', {\r\n    weekday: 'long',\r\n    day: 'numeric',\r\n    month: 'short'\r\n  });\r\n}\r\n\r\nfunction obtenerFechaSeleccionada() {\r\n  // Asume que la fecha está en formato \"Lunes 9/01\" o similar\r\n  // Necesitas convertir esto a un formato que coincida con tu DB (YYYY-MM-DD)\r\n  if (!datosReserva.fecha) return new Date().toISOString().split('T')[0];\r\n  \r\n  // Implementación básica - ajusta según tu formato de fecha\r\n  const partes = datosReserva.fecha.split(' ');\r\n  const [dia, mes] = partes[1].split('/');\r\n  const año = new Date().getFullYear();\r\n  \r\n  return `${año}-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}`;\r\n}\r\n\r\nfunction actualizarUIFechas(fechasDisponibles) {\r\n  const paso2 = document.querySelector('.paso-2');\r\n  if (!paso2) {\r\n    console.error('No se encontró el contenedor del paso 2');\r\n    return;\r\n  }\r\n\r\n  const contenedorFechas = paso2.querySelector('.contenedor-fechas');\r\n  const plantillaFecha = paso2.querySelector('.flotante.fecha');\r\n  const cargando = paso2.querySelector('.cargando-fechas');\r\n  const sinFechas = paso2.querySelector('.sin-fechas');\r\n\r\n  // Ocultar mensaje de carga y limpiar contenedor\r\n  if (cargando) cargando.style.display = 'none';\r\n  if (sinFechas) sinFechas.style.display = 'none';\r\n  contenedorFechas.innerHTML = '';\r\n\r\n  if (plantillaFecha) {\r\n    plantillaFecha.style.display = 'none';\r\n  }\r\n\r\n  if (fechasDisponibles.length === 0) {\r\n    if (sinFechas) {\r\n      sinFechas.style.display = 'block';\r\n      sinFechas.textContent = 'No hay fechas disponibles en este momento';\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Mostrar fechas disponibles\r\n  contenedorFechas.style.display = 'grid';\r\n  fechasDisponibles.forEach(fecha => {\r\n    if (!plantillaFecha) return;\r\n    \r\n    const nuevoElemento = plantillaFecha.cloneNode(true);\r\n    nuevoElemento.style.display = 'flex';\r\n    nuevoElemento.querySelector('.p1').textContent = fecha.display;\r\n    nuevoElemento.dataset.fechaReal = fecha.fecha;\r\n    \r\n    nuevoElemento.addEventListener('click', function() {\r\n      seleccionarElemento(this, 'fecha');\r\n      cargarHorariosParaFecha(fecha.fecha);\r\n    });\r\n    \r\n    contenedorFechas.appendChild(nuevoElemento);\r\n  });\r\n}\r\n\r\nasync function cargarHorariosParaFecha(fecha) {\r\n  const paso3 = document.querySelector('.paso-3');\r\n  if (!paso3) return;\r\n\r\n  // Resetear estado primero\r\n  const contenedor = paso3.querySelector('.contenedor-horarios');\r\n  const sinHorarios = paso3.querySelector('.sin-horarios');\r\n  \r\n  if (contenedor) contenedor.innerHTML = '';\r\n  if (sinHorarios) sinHorarios.style.display = 'none';\r\n\r\n  // Mostrar carga\r\n  const cargando = paso3.querySelector('.cargando-horarios');\r\n  if (cargando) cargando.style.display = 'block';\r\n\r\n  try {\r\n    // console.log(\"Cargando horarios para fecha:\", fecha);\r\n    let horarios = await firestoreDB.generarHorariosDisponibles(fecha);\r\n    // console.log(\"Horarios recibidos:\", horarios);\r\n    \r\n    // Obtener fecha actual en Argentina (UTC-3)\r\n    const ahoraArg = new Date(new Date().toLocaleString(\"en-US\", {timeZone: \"America/Argentina/Buenos_Aires\"}));\r\n    const hoyArg = new Date(ahoraArg.getFullYear(), ahoraArg.getMonth(), ahoraArg.getDate());\r\n    const fechaSeleccionada = new Date(fecha + 'T00:00:00-03:00'); // Forzar zona horaria Argentina\r\n    \r\n    // Si es hoy, filtrar los horarios que ya pasaron o están muy próximos\r\n    if (fechaSeleccionada.getTime() === hoyArg.getTime()) {\r\n      const ahoraEnMinutos = ahoraArg.getHours() * 60 + ahoraArg.getMinutes();\r\n      const tiempoMinimoReserva = 30; // 30 minutos de anticipación\r\n      \r\n      horarios = horarios.filter(horario => {\r\n        const [horas, minutos] = horario.hora.split(':').map(Number);\r\n        const horarioEnMinutos = horas * 60 + minutos;\r\n        \r\n        // Solo mostrar horarios que tengan al menos 30 minutos de diferencia\r\n        return horarioEnMinutos >= ahoraEnMinutos + tiempoMinimoReserva;\r\n      });\r\n      \r\n      // console.log(\"Horarios filtrados para hoy:\", horarios);\r\n    }\r\n    \r\n    // Guardar fecha seleccionada\r\n    datosReserva.fecha = fecha;\r\n    \r\n    // Actualizar UI\r\n    actualizarUIHorarios(horarios);\r\n    \r\n  } catch (error) {\r\n    console.error(\"Error cargando horarios:\", error);\r\n    if (sinHorarios) {\r\n      sinHorarios.style.display = 'block';\r\n      sinHorarios.textContent = 'Error al cargar horarios. Intenta nuevamente.';\r\n    }\r\n  } finally {\r\n    if (cargando) cargando.style.display = 'none';\r\n    if (contenedor) contenedor.style.display = 'grid';\r\n  }\r\n}\r\n\r\nasync function generarHorariosDisponibles(fecha) {\r\n  const [config, turnosOcupados] = await Promise.all([\r\n    this.obtenerConfiguracion(),\r\n    this.obtenerTurnosPorFecha(fecha)\r\n  ]);\r\n  \r\n  const horariosOcupados = turnosOcupados.map(t => t.horario);\r\n  const horarios = this._generarHorarios(config, horariosOcupados, fecha);\r\n  \r\n  // console.log(\"Horarios generados para\", fecha, \":\", horarios);\r\n  return horarios;\r\n}\r\n\r\nfunction actualizarUIHorarios(horariosDisponibles) {\r\n  const paso3 = document.querySelector('.paso-3');\r\n  if (!paso3) return;\r\n\r\n  const contenedor = paso3.querySelector('.contenedor-horarios');\r\n  const plantilla = paso3.querySelector('.flotante.horario');\r\n  const sinHorarios = paso3.querySelector('.sin-horarios');\r\n  \r\n  // Limpiar contenedor completamente\r\n  if (contenedor) contenedor.innerHTML = '';\r\n  if (sinHorarios) sinHorarios.style.display = 'none';\r\n\r\n  // Mostrar mensaje si no hay horarios\r\n  if (!horariosDisponibles || horariosDisponibles.length === 0) {\r\n    if (sinHorarios) {\r\n      sinHorarios.style.display = 'block';\r\n      sinHorarios.textContent = 'No hay horarios disponibles para esta fecha';\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Crear elementos de horarios\r\n  horariosDisponibles.forEach(horario => {\r\n    const elemento = document.createElement('div');\r\n    elemento.className = 'flotante horario';\r\n    elemento.style.display = 'flex';\r\n    \r\n    // Crear elementos internos\r\n    const p1 = document.createElement('p');\r\n    p1.className = 'p1';\r\n    p1.textContent = horario.hora;\r\n    \r\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\r\n    svg.setAttribute('class', 'check-icon');\r\n    svg.setAttribute('viewBox', '0 0 24 24');\r\n    \r\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\r\n    path.setAttribute('d', 'M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z');\r\n    \r\n    svg.appendChild(path);\r\n    \r\n    // Ensamblar el elemento\r\n    elemento.appendChild(p1);\r\n    elemento.appendChild(svg);\r\n    \r\n    // Solo agregar la clase .ocupado si no está disponible\r\n    if (!horario.disponible) {\r\n      elemento.classList.add('ocupado');\r\n    } else {\r\n      elemento.addEventListener('click', () => {\r\n        seleccionarElemento(elemento, 'horario');\r\n        datosReserva.horario = horario.hora;\r\n      });\r\n    }\r\n    \r\n    if (contenedor) contenedor.appendChild(elemento);\r\n  });\r\n}\r\n\r\nasync function verificarDisponibilidadEnTiempoReal(fecha, horario) {\r\n  try {\r\n    const disponible = await firestoreDB.verificarDisponibilidad(fecha, horario);\r\n    if (!disponible) {\r\n      mostrarError('Este horario ya no está disponible. Por favor selecciona otro.');\r\n      // Remover el horario ocupado de la UI\r\n      document.querySelectorAll('.flotante.horario').forEach(el => {\r\n        if (el.textContent.trim() === horario) {\r\n          el.classList.add('ocupado');\r\n          el.removeEventListener('click', manejarClickHorario);\r\n        }\r\n      });\r\n      return false;\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error verificando disponibilidad:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Función auxiliar para crear el contenedor si no existe\r\nfunction crearContenedorHorarios(paso3) {\r\n  const contenedor = document.createElement('div');\r\n  contenedor.className = 'contenedor-horarios';\r\n  paso3.appendChild(contenedor);\r\n  return contenedor;\r\n}\r\n\r\n// Funciones de apoyo\r\nfunction actualizarPasos() {\r\n    elementos.pasos.forEach((paso, index) => {\r\n        paso.classList.toggle('activo', index + 1 === pasoActual);\r\n    });\r\n}\r\n\r\nfunction actualizarProgreso() {\r\n    const porcentaje = (pasoActual / totalPasos) * 100;\r\n    elementos.progreso.style.width = `${porcentaje}%`;\r\n}\r\n\r\nfunction actualizarBotones() {\r\n    // Ocultar spinner al cambiar de paso\r\n    const loader = document.getElementById('reserva-loader');\r\n    if (loader) loader.style.display = 'none';\r\n\r\n    // Botón anterior\r\n    if (pasoActual === 1) {\r\n        elementos.btnAnterior.classList.remove('activo');\r\n    } else {\r\n        elementos.btnAnterior.classList.add('activo');\r\n    }\r\n    \r\n    // Limpiar eventos previos del botón siguiente\r\n    elementos.btnSiguiente.replaceWith(elementos.btnSiguiente.cloneNode(true));\r\n    elementos.btnSiguiente = document.querySelector('.btn-siguiente');\r\n    \r\n    // Configurar botón siguiente según el paso actual\r\n    if (pasoActual === totalPasos) {\r\n        elementos.btnSiguiente.classList.add('btn-reserva');\r\n        elementos.btnSiguiente.textContent = 'Reservar';\r\n        elementos.btnSiguiente.addEventListener('click', async () => {\r\n            await simularReserva();\r\n        });\r\n    } else {\r\n        elementos.btnSiguiente.classList.remove('btn-reserva');\r\n        elementos.btnSiguiente.innerHTML = `\r\n            <svg class=\"flecha\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\r\n                <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\" fill=\"ffffff\"/>\r\n            </svg>\r\n        `;\r\n        elementos.btnSiguiente.addEventListener('click', avanzarPaso);\r\n    }\r\n}\r\n\r\nfunction seleccionarElemento(elemento, tipo) {\r\n    // Si ya está seleccionado y es servicio, deseleccionar\r\n    if (elemento.classList.contains('seleccionado') && tipo === 'servicio') {\r\n        elemento.classList.remove('seleccionado');\r\n        actualizarServiciosSeleccionados();\r\n        return;\r\n    }\r\n\r\n    // Para servicios (selección múltiple)\r\n    if (tipo === 'servicio') {\r\n        elemento.classList.add('seleccionado');\r\n        actualizarServiciosSeleccionados();\r\n    } \r\n    // Para fechas/horarios (selección única)\r\n    else {\r\n        document.querySelectorAll(`.flotante.${tipo}`).forEach(el => {\r\n            el.classList.remove('seleccionado');\r\n        });\r\n        elemento.classList.add('seleccionado');\r\n        datosReserva[tipo] = elemento.querySelector('.p1').textContent;\r\n        \r\n        // Remover mensaje de error si se selecciona\r\n        if (tipo === 'fecha') {\r\n            document.getElementById('error-fecha').classList.remove('visible');\r\n        } else if (tipo === 'horario') {\r\n            document.getElementById('error-horario').classList.remove('visible');\r\n        }\r\n    }\r\n}\r\n\r\nasync function validarPaso(paso) {\r\n    const pasoElement = document.querySelector(`.paso-${paso}`);\r\n    if (!pasoElement) {\r\n        console.error(`Elemento del paso ${paso} no encontrado`);\r\n        return false;\r\n    }\r\n\r\n    // Ocultar todos los mensajes de error primero\r\n    const errores = pasoElement.querySelectorAll('.error-mensaje');\r\n    if (errores) {\r\n        errores.forEach(msg => msg.classList.remove('visible'));\r\n    }\r\n\r\n    switch (paso) {\r\n       case 1: \r\n        const errorServicio = pasoElement.querySelector('#error-servicio');\r\n        if (datosReserva.servicios.length === 0) {\r\n            if (errorServicio) {\r\n                errorServicio.classList.add('visible');\r\n                errorServicio.style.animation = 'shake 0.5s';\r\n                setTimeout(() => errorServicio.style.animation = '', 500);\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n            \r\n        case 2:\r\n            const errorFecha = pasoElement.querySelector('#error-fecha');\r\n            if (!datosReserva.fecha) {\r\n                if (errorFecha) errorFecha.classList.add('visible');\r\n                return false;\r\n            }\r\n            return true;\r\n            \r\n        case 3:\r\n          const errorHorario = pasoElement.querySelector('#error-horario');\r\n          if (!datosReserva.horario) {\r\n              if (errorHorario) errorHorario.classList.add('visible');\r\n              return false;\r\n          }\r\n          \r\n          // Mostrar spinner en el botón\r\n          toggleLoader(true);\r\n          \r\n          try {\r\n              const duracionTotal = calcularDuracionTotal();\r\n              console.log(`Validando disponibilidad para ${datosReserva.horario} con duración ${duracionTotal} minutos`);\r\n              \r\n              const validacion = await validarDisponibilidadCompleta(\r\n                  datosReserva.fecha, \r\n                  datosReserva.horario,\r\n                  duracionTotal\r\n              );\r\n              \r\n              if (!validacion.disponible || validacion.turnosSolapados.length > 0) {\r\n                  mostrarError(validacion.mensaje || 'El horario ya no está disponible para la duración requerida');\r\n                  console.error('Validación fallida:', validacion);\r\n                  return false;\r\n              }\r\n              return true;\r\n          } finally {\r\n              toggleLoader(false);\r\n        }\r\n            \r\n        case 4:\r\n            return validarFormulario();\r\n            \r\n        default:\r\n            return true;\r\n    }\r\n}\r\n\r\nfunction validarFormulario() {\r\n    let valido = true;\r\n    const nombre = document.getElementById('nombre').value.trim();\r\n    const email = document.getElementById('email').value.trim();\r\n    const telefono = document.getElementById('telefono').value.trim();\r\n    \r\n    // Ocultar todos los mensajes primero\r\n    document.querySelectorAll('.error-mensaje').forEach(msg => {\r\n        msg.classList.remove('visible');\r\n    });\r\n    \r\n    // Validar nombre\r\n    if (!nombre || nombre.length < 5) {\r\n        document.getElementById('error-nombre').classList.add('visible');\r\n        document.getElementById('nombre').classList.add('invalido');\r\n        valido = false;\r\n    }\r\n    \r\n    // Validar email\r\n    if (!email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n        document.getElementById('error-email').classList.add('visible');\r\n        document.getElementById('email').classList.add('invalido');\r\n        valido = false;\r\n    }\r\n    \r\n    // Validar teléfono\r\n    if (!telefono || !/^[0-9]{10}$/.test(telefono)) {\r\n        document.getElementById('error-telefono').classList.add('visible');\r\n        document.getElementById('telefono').classList.add('invalido');\r\n        valido = false;\r\n    }\r\n    \r\n    return valido;\r\n}\r\n\r\nfunction guardarDatosFormulario() {\r\n    datosReserva.nombre = document.getElementById('nombre').value.trim();\r\n    datosReserva.email = document.getElementById('email').value.trim();\r\n    datosReserva.telefono = document.getElementById('telefono').value.trim();\r\n    datosReserva.observacion = document.getElementById('observacion').value.trim() || 'Ninguna';\r\n}\r\n\r\nfunction actualizarResumen() {\r\n    // Verificar que los elementos existen antes de acceder\r\n    if (elementos.resumenNombre) {\r\n        elementos.resumenNombre.textContent = datosReserva.nombre || \"[No ingresado]\";\r\n    }\r\n    \r\n    const emailElement = document.getElementById('cliente-email');\r\n    if (emailElement) {\r\n        emailElement.textContent = datosReserva.email || \"[No ingresado]\";\r\n    }\r\n    \r\n    if (elementos.resumenTelefono) {\r\n        elementos.resumenTelefono.textContent = datosReserva.telefono || \"[No ingresado]\";\r\n    }\r\n    \r\n    // Servicios seleccionados\r\n    const listaServicios = datosReserva.servicios.length > 0\r\n        ? datosReserva.servicios.map(s => `${s.nombre}`).join(\", \")\r\n        : \"Ninguno seleccionado\";\r\n    elementos.resumenServicio.innerHTML = listaServicios;\r\n    \r\n    // Fecha y hora\r\n    elementos.resumenFecha.textContent = datosReserva.fecha || \"[No seleccionada]\";\r\n    elementos.resumenHorario.textContent = datosReserva.horario || \"[No seleccionado]\";\r\n    elementos.resumenObservacion.textContent = datosReserva.observacion;\r\n    \r\n    // Cálculos de precios\r\n    const subtotal = calcularSubtotal();\r\n    const saldoPendiente = Math.max(0, subtotal - datosReserva.reserva); // No negativo\r\n    \r\n    document.getElementById('subtotal').textContent = `$${subtotal.toLocaleString()}`;\r\n    document.getElementById('senia').textContent = `$${datosReserva.reserva.toLocaleString()}`;\r\n    document.getElementById('saldo-pendiente').textContent = `$${saldoPendiente.toLocaleString()}`;\r\n}\r\n\r\nfunction validarNombre() {\r\n    const input = document.getElementById('nombre');\r\n    const errorMsg = document.getElementById('error-nombre');\r\n    \r\n    if (input.value.trim().length >= 5) {\r\n        input.classList.remove('invalido');\r\n        errorMsg.classList.remove('visible');\r\n    } else {\r\n        input.classList.add('invalido');\r\n    }\r\n}\r\n\r\nfunction validarTelefono() {\r\n    const input = document.getElementById('telefono');\r\n    const errorMsg = document.getElementById('error-telefono');\r\n    \r\n    if (/^[0-9]{10}$/.test(input.value)) {\r\n        input.classList.remove('invalido');\r\n        errorMsg.classList.remove('visible');\r\n    } else {\r\n        input.classList.add('invalido');\r\n    }\r\n}\r\n\r\n// Nueva función para validar email\r\nfunction validarEmail() {\r\n    const input = document.getElementById('email');\r\n    const errorMsg = document.getElementById('error-email');\r\n    \r\n    if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(input.value)) {\r\n        input.classList.remove('invalido');\r\n        errorMsg.classList.remove('visible');\r\n    } else {\r\n        input.classList.add('invalido');\r\n    }\r\n}\r\n\r\nasync function mostrarConfirmacion(exito) {\r\n    // Ocultar todos los pasos\r\n    elementos.pasos.forEach(paso => paso.classList.remove('activo'));\r\n    \r\n    // Mostrar paso de confirmación\r\n    const paso6 = document.querySelector('.paso-6');\r\n    paso6.classList.add('activo');\r\n    \r\n    // SVG para éxito y error\r\n    const successSVG = `\r\n      <svg class=\"confirmacion-icono\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\r\n      </svg>\r\n    `;\r\n    \r\n    const errorSVG = `\r\n      <svg class=\"confirmacion-icono\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/>\r\n      </svg>\r\n    `;\r\n    \r\n    // Botón SVG\r\n    const buttonSVG = `\r\n      <svg viewBox=\"0 0 24 24\">\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/>\r\n      </svg>\r\n    `;\r\n\r\n    // Mostrar el estado correspondiente\r\n    if (exito) {\r\n        const subtotal = datosReserva.servicios.reduce((total, servicio) => total + servicio.precio, 0);\r\n        const saldoPendiente = Math.max(0, subtotal - datosReserva.reserva);\r\n        \r\n        const exitoContainer = document.querySelector('.paso-6 .exito');\r\n        exitoContainer.innerHTML = `\r\n            ${successSVG}\r\n            <h2>¡Turno reservado!</h2>\r\n            <p>Nos vemos en la pelu. Recibirás un email de confirmación.</p>\r\n            <div class=\"resumen-confirmacion\">\r\n                <h3>Resumen de tu reserva</h3>\r\n                <p><strong>Servicios:</strong> ${datosReserva.servicios.map(s => s.nombre).join(', ')}</p>\r\n                <p><strong>Fecha:</strong> ${datosReserva.fecha}</p>\r\n                <p><strong>Hora:</strong> ${datosReserva.horario}</p>\r\n                <p><strong>Seña abonada:</strong> $${datosReserva.reserva.toLocaleString()}</p>\r\n                <p class=\"total-confirmacion\">Saldo pendiente: $${saldoPendiente.toLocaleString()}</p>\r\n            </div>\r\n        `;\r\n        \r\n        document.querySelector('.paso-6 .exito').classList.add('visible');\r\n        document.querySelector('.paso-6 .error').classList.remove('visible');\r\n    } else {\r\n        const errorContainer = document.querySelector('.paso-6 .error');\r\n        errorContainer.innerHTML = `\r\n            ${errorSVG}\r\n            <h2>No se pudo realizar la reserva</h2>\r\n            <p>Intenta nuevamente en unos minutos.</p>\r\n        `;\r\n        \r\n        document.querySelector('.paso-6 .exito').classList.remove('visible');\r\n        document.querySelector('.paso-6 .error').classList.add('visible');\r\n    }\r\n    \r\n    // Ocultar controles de navegación\r\n    elementos.btnAnterior.style.display = 'none';\r\n    elementos.btnSiguiente.style.display = 'none';\r\n    \r\n    // Botón para nueva reserva\r\n    if (!document.getElementById('nueva-reserva')) {\r\n        const botonNuevaReserva = `\r\n            <button id=\"nueva-reserva\" class=\"btn-reserva\">\r\n                ${buttonSVG}\r\n                ${exito ? 'Volver' : 'Volver a intentar'}\r\n            </button>\r\n        `;\r\n        paso6.insertAdjacentHTML('beforeend', botonNuevaReserva);\r\n        \r\n        document.getElementById('nueva-reserva').addEventListener('click', () => {\r\n            location.reload();\r\n        });\r\n    }\r\n}\r\n\r\n//////////////////////////////////////////\r\n//////////// Autenticacion //////////////\r\n/////////////////////////////////////////\r\n\r\nfunction inicializarAuth() {\r\n  const authContainer = document.querySelector('nav');\r\n  if (!authContainer) return;\r\n\r\n  // Crear botón si no existe\r\n  if (!document.getElementById('btn-google')) {\r\n    authContainer.innerHTML += '<button id=\"btn-google\">Acceder</button>';\r\n  }\r\n\r\n  // Manejar estado de autenticación\r\n  firebase.auth().onAuthStateChanged(user => {\r\n    usuarioActual = user;\r\n    const btnGoogle = document.getElementById('btn-google');\r\n    \r\n    if (user) {\r\n      // Reemplazar botón con nombre\r\n      btnGoogle.outerHTML = `<p class=\"usuario-nombre\">${user.displayName}</p>`;\r\n      guardarUsuario(user);\r\n    } else {\r\n      // Asegurarse que el botón existe\r\n      if (!document.getElementById('btn-google')) {\r\n        authContainer.innerHTML += '<button id=\"btn-google\">Acceder</button>';\r\n      }\r\n      limpiarUsuario();\r\n    }\r\n  });\r\n\r\n  // Delegación de eventos para el botón dinámico\r\n  document.querySelector('nav').addEventListener('click', async (e) => {\r\n    if (e.target.id === 'btn-google') {\r\n      try {\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n        await firebase.auth().signInWithPopup(provider);\r\n      } catch (error) {\r\n        console.error('Error de autenticación:', error);\r\n        alert('Error al iniciar sesión: ' + error.message);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// Función para mostrar errores de autenticación\r\nfunction mostrarErrorAuth(error) {\r\n  let mensaje = 'Error al autenticar';\r\n  \r\n  if (error.code === 'auth/popup-closed-by-user') {\r\n    mensaje = 'El popup de autenticación fue cerrado';\r\n  } else if (error.code === 'auth/cancelled-popup-request') {\r\n    mensaje = 'Solicitud de autenticación cancelada';\r\n  } else {\r\n    mensaje = error.message || 'Error desconocido';\r\n  }\r\n  \r\n  alert(mensaje); // O puedes mostrar esto en tu UI\r\n}\r\n\r\n// Guardar datos del usuario en LocalStorage\r\nfunction guardarUsuario(user) {\r\n  localStorage.setItem('usuario', JSON.stringify({\r\n    uid: user.uid,\r\n    nombre: user.displayName,\r\n    email: user.email\r\n  }));\r\n}\r\n\r\n// Limpiar datos del usuario\r\nfunction limpiarUsuario() {\r\n  localStorage.removeItem('usuario');\r\n}\r\n\r\n// Actualizar la UI con los datos del usuario\r\nfunction actualizarUIUsuario(user) {\r\n  const btnGoogle = document.getElementById('btn-google');\r\n  if (!btnGoogle) return;\r\n\r\n  // Cambiar el botón por un simple párrafo con el nombre\r\n  btnGoogle.outerHTML = `<p class=\"usuario-nombre\"></p>`;\r\n  \r\n  // Autocompletar formulario\r\n  autocompletarFormulario(user);\r\n}\r\n\r\nfunction mostrarBotonLogin() {\r\n  const contenedor = document.querySelector('nav h1').parentElement;\r\n  if (!contenedor.querySelector('#btn-google')) {\r\n    contenedor.innerHTML += '<button id=\"btn-google\">Acceder</button>';\r\n  }\r\n}\r\n\r\nfunction autocompletarFormulario(user) {\r\n  // Solo autocompletar si estamos en el paso 4 y los campos existen\r\n  const paso4 = document.querySelector('.paso-4');\r\n  if (!paso4 || !paso4.classList.contains('activo') || !user) return;\r\n\r\n  const nombreInput = document.getElementById('nombre');\r\n  const emailInput = document.getElementById('email');\r\n  \r\n  if (nombreInput && !nombreInput.value) {\r\n    nombreInput.value = user.displayName || '';\r\n    validarNombre();\r\n  }\r\n  \r\n  if (emailInput && !emailInput.value) {\r\n    emailInput.value = user.email || '';\r\n    validarEmail();\r\n    datosReserva.email = user.email;\r\n  }\r\n}\r\n\r\n//////////////////////////////\r\n//////////////////////////////\r\n//////////////////////////////\r\n//////////////////////////////\r\n////////////////////////////// \r\n\r\nfunction toggleLoader(mostrar) {\r\n    const btnSiguiente = document.querySelector('.btn-siguiente');\r\n    const loader = document.getElementById('reserva-loader');\r\n    \r\n    if (mostrar) {\r\n        btnSiguiente.style.display = 'none';\r\n        loader.style.display = 'inline-block';\r\n    } else {\r\n        loader.style.display = 'none';\r\n        btnSiguiente.style.display = 'flex';\r\n    }\r\n}"]}
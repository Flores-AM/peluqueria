{"version":3,"sources":["firebaseConfig.js","global.js","firestore.js","admin.js","email.js","app.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","window","brevoConfig","senderEmail","senderName","adminEmail","firebase","apps","length","initializeApp","firebaseAuth","auth","db","firestore","googleProvider","GoogleAuthProvider","addScope","Error","firestoreDB","obtenerConfiguracion","doc","collection","get","exists","data","horarioApertura","replace","horarioCierre","Array","isArray","diasLaborales","JSON","parse","e","console","error","split","map","Number","filter","n","isNaN","diasNoLaborables","Boolean","async","fecha","where","docs","generarHorariosDisponibles","config","turnosOcupados","Promise","all","this","obtenerTurnosPorFecha","horariosOcupados","t","horario","_generarHorarios","fechaSeleccionada","horaApertura","parseInt","minApertura","horaCierre","minCierre","duracion","duracionTurno","horarios","horaActual","minActual","horarioStr","toString","padStart","push","hora","disponible","includes","Math","floor","verificarDisponibilidad","limit","empty","code","some","obtenerTurnosSolapados","horaStr","minutoStr","horaInicio","minutoFin","minutoFinAjustado","horarioFin","userId","add","timestamp","FieldValue","serverTimestamp","expiresAt","Date","now","id","eliminarBloqueoTemporal","bloqueoId","delete","guardarTurno","turnoData","estado","createdAt","actualizadoEl","ADMIN_UID","elements","authContainer","document","getElementById","adminPanel","loginBtn","logoutBtn","calendar","turnosList","fechaTitulo","modalEditar","formEditar","btnEliminar","querySelector","btnEliminarModal","closeModal","currentTurnoId","verificarFirestore","log","alert","setTimeout","location","reload","initAdmin","onAuthStateChanged","handleAuthState","addEventListener","signInWithGoogle","signOut","style","display","preventDefault","guardarCambiosTurno","onclick","target","obtenerConfiguracionPorDefecto","dias","warn","startsWith","normalizarDias","sort","a","b","validarHorario","horas","minutos","horarioEnMinutos","aperturaH","aperturaM","cierreH","cierreM","valido","mensaje","user","uid","showAdminPanel","initCalendar","loadTurnosForDate","toISOString","showLoginScreen","destroy","provider","signInWithPopup","message","FullCalendar","Calendar","initialView","locale","headerToolbar","left","center","right","selectable","selectMirror","dayMaxEvents","selectOverlap","dateClick","info","querySelectorAll","forEach","el","classList","remove","dayEl","dateStr","events","fetchInfo","successCallback","failureCallback","snapshot","startStr","endStr","title","cliente","servicios","join","start","allDay","extendedProps","telefono","email","observaciones","className","borderColor","eventClick","abrirModalEdicion","event","select","unselect","dayMaxEventRows","views","dayGridMonth","displayEventTime","timeGridWeek","timeGridDay","viewDidMount","render","getEventColor","date","fechaObj","fechaAjustada","getTime","getTimezoneOffset","options","weekday","year","month","day","textContent","toLocaleDateString","renderTurnos","orderBy","innerHTML","turnos","turno","header","tagName","card","closest","detalles","icon","toggle","contains","btn","stopPropagation","turnoId","currentTarget","getAttribute","confirm","loading","mostrarLoading","eliminarTurno","fechaActual","abrirModalEdicionPorId","generarOpcionesHorario","value","getHours","getMinutes","refetchEvents","configurarModalEliminar","loadingIndicator","createElement","body","appendChild","selectHorario","minutoActual","option","minuto","inicioEnMinutos","finEnMinutos","query","turnosSolapados","turnoHora","turnoMinuto","turnoInicio","turnoFin","currentUser","fechaInput","validacionHorario","diaSemana","getDay","disponibilidad","turnoActualizado","update","fechaTurno","setupModalEvents","modal","enviarEmailConfirmacion","datosTurno","emailData","to","name","nombre","subject","htmlContent","s","reserva","toLocaleString","montoTotal","getFullYear","bcc","enviarEmail","functions","httpsCallable","success","pasoActual","totalPasos","datosReserva","precios","Corte","Alisado","observacion","usuarioActual","elementos","progreso","btnAnterior","btnSiguiente","pasos","resumenNombre","resumenEmail","resumenTelefono","resumenServicio","resumenFecha","resumenHorario","resumenObservacion","probarConexion","hoy","mostrarError","errorContainer","inicializarEventos","retrocederPaso","avanzarPaso","servicio","actualizarServiciosSeleccionados","seleccionarElemento","horarioSeleccionado","validacion","validarDisponibilidadCompleta","validarNombre","validarEmail","validarTelefono","calcularSubtotal","subtotal","reduce","total","precio","serviciosSeleccionados","from","serv","validarPaso","guardarDatosFormulario","actualizarResumen","actualizarInterfaz","autocompletarFormulario","actualizarPasos","actualizarProgreso","actualizarBotones","simularReserva","loader","visibility","disabled","mostrarConfirmacion","then","enviado","completarReserva","bloquearTurnoTemporal","catch","inicializarDisponibilidad","apertura","cierre","fechasDisponibles","generarFechasDisponibles","actualizarUIFechas","ahoraArg","timeZone","hoyArg","getMonth","getDate","empezarDesdeManana","diaInicial","i","setDate","esDiaLaboral","toDateString","fechaStr","formatearFechaDisplay","obtenerFechaSeleccionada","partes","dia","mes","paso2","contenedorFechas","plantillaFecha","cargando","sinFechas","nuevoElemento","cloneNode","dataset","fechaReal","cargarHorariosParaFecha","paso3","contenedor","sinHorarios","ahoraEnMinutos","tiempoMinimoReserva","actualizarUIHorarios","horariosDisponibles","elemento","p1","svg","createElementNS","setAttribute","path","verificarDisponibilidadEnTiempoReal","trim","removeEventListener","manejarClickHorario","crearContenedorHorarios","paso","index","porcentaje","width","replaceWith","tipo","pasoElement","errores","msg","errorServicio","errorFecha","errorHorario","validarFormulario","test","emailElement","listaServicios","saldoPendiente","max","input","errorMsg","exito","paso6","botonNuevaReserva","insertAdjacentHTML","inicializarAuth","btnGoogle","outerHTML","displayName","guardarUsuario","limpiarUsuario","mostrarErrorAuth","localStorage","setItem","stringify","removeItem","actualizarUIUsuario","mostrarBotonLogin","parentElement","paso4","nombreInput","emailInput","usuarioLS","getItem"],"mappings":"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","file":"bundle.min.js","sourcesContent":["// firebaseConfig.js - Versión completa\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBFYeM1-ZmdTwKUS4hLjx4pyBcryxdyTYU\",\r\n  authDomain: \"peluqueria-2d648.firebaseapp.com\",\r\n  projectId: \"peluqueria-2d648\",\r\n  storageBucket: \"peluqueria-2d648.appspot.com\",\r\n  messagingSenderId: \"115281106854\",\r\n  appId: \"1:115281106854:web:309315fc966472f4892167\"\r\n};\r\n\r\n// Configuración Brevo\r\nwindow.brevoConfig = {\r\n  senderEmail: \"agustinmatiasf@gmail.com\",\r\n  senderName: \"Esvelta Peluquería\",\r\n  adminEmail: \"agustinmatias62@gmail.com\"\r\n};\r\n\r\n// Inicializar Firebase\r\nif (!firebase.apps.length) {\r\n  firebase.initializeApp(firebaseConfig);\r\n}\r\n\r\n// Exportar las instancias necesarias\r\nwindow.firebaseAuth = firebase.auth();\r\nwindow.db = firebase.firestore();","window.googleProvider = new firebase.auth.GoogleAuthProvider();\r\nwindow.googleProvider.addScope('profile');\r\nwindow.googleProvider.addScope('email');","// firestore.js - Versión completa con validación cruzada\r\n(() => {\r\n  if (!firebase.apps.length) {\r\n    throw new Error('Firebase no está inicializado');\r\n  }\r\n\r\n  const { db } = window;\r\n\r\n  window.firestoreDB = {\r\n    // Obtener configuración\r\n    async obtenerConfiguracion() {\r\n      const doc = await db.collection('config').doc('horarios').get();\r\n      if (!doc.exists) throw new Error(\"No se encontró configuración\");\r\n      \r\n      const data = doc.data();\r\n      \r\n      // Limpiar formatos de horarios\r\n      if (typeof data.horarioApertura === 'string') {\r\n        data.horarioApertura = data.horarioApertura.replace(/\"/g, '');\r\n      }\r\n      if (typeof data.horarioCierre === 'string') {\r\n        data.horarioCierre = data.horarioCierre.replace(/\"/g, '');\r\n      }\r\n      \r\n      // Convertir diasLaborales a array de números\r\n      if (Array.isArray(data.diasLaborales)) {\r\n        if (data.diasLaborales.length === 1 && typeof data.diasLaborales[0] === 'string') {\r\n          // Caso: ['[1,2,3,4,5]']\r\n          try {\r\n            data.diasLaborales = JSON.parse(data.diasLaborales[0]);\r\n          } catch (e) {\r\n            console.error(\"Error parseando diasLaborales:\", e);\r\n            data.diasLaborales = [1,2,3,4,5]; // Valor por defecto (L-V)\r\n          }\r\n        }\r\n      } else if (typeof data.diasLaborales === 'string') {\r\n        // Caso: \"1,2,3,4,5\"\r\n        data.diasLaborales = data.diasLaborales.split(',').map(Number).filter(n => !isNaN(n));\r\n      }\r\n      \r\n      // Convertir diasNoLaborables si es necesario\r\n      if (typeof data.diasNoLaborables === 'string') {\r\n        try {\r\n          data.diasNoLaborables = JSON.parse(data.diasNoLaborables);\r\n        } catch (e) {\r\n          data.diasNoLaborables = data.diasNoLaborables.replace(/[\\[\\]\\s]/g, '').split(',').filter(Boolean);\r\n        }\r\n      }\r\n      \r\n      return data;\r\n    },\r\n\r\n    // Obtener turnos por fecha\r\n    async obtenerTurnosPorFecha(fecha) {\r\n      const snapshot = await db.collection('turnos')\r\n        .where('fecha', '==', fecha)\r\n        .get();\r\n      return snapshot.docs.map(doc => doc.data());\r\n    },\r\n\r\n    // Generar horarios disponibles\r\n    async generarHorariosDisponibles(fecha) {\r\n      const [config, turnosOcupados] = await Promise.all([\r\n        this.obtenerConfiguracion(),\r\n        this.obtenerTurnosPorFecha(fecha)\r\n      ]);\r\n      \r\n      const horariosOcupados = turnosOcupados.map(t => t.horario);\r\n      return this._generarHorarios(config, horariosOcupados, fecha);\r\n      // Devuelve el array completo de objetos {hora, disponible} sin mapear solo las horas\r\n    },\r\n\r\n    // Función privada para generar horarios\r\n    _generarHorarios(config, horariosOcupados, fechaSeleccionada) {\r\n      const horarioApertura = config.horarioApertura;\r\n      const horarioCierre = config.horarioCierre;\r\n      \r\n      // Asegurar formato correcto (por si hay puntos en lugar de dos puntos)\r\n      const horaApertura = parseInt(horarioApertura.replace('.', ':').split(':')[0]);\r\n      const minApertura = parseInt(horarioApertura.replace('.', ':').split(':')[1] || 0);\r\n      const horaCierre = parseInt(horarioCierre.replace('.', ':').split(':')[0]);\r\n      const minCierre = parseInt(horarioCierre.replace('.', ':').split(':')[1] || 0);\r\n      const duracion = config.duracionTurno;\r\n\r\n      // Validación de valores numéricos\r\n      if (isNaN(horaApertura)) throw new Error('Horario apertura inválido');\r\n      if (isNaN(minApertura)) minApertura = 0;\r\n      if (isNaN(horaCierre)) throw new Error('Horario cierre inválido');\r\n      if (isNaN(minCierre)) minCierre = 0;\r\n      if (isNaN(duracion)) throw new Error('Duración turno inválida');\r\n\r\n      const horarios = [];\r\n      let horaActual = horaApertura;\r\n      let minActual = minApertura;\r\n\r\n      while (horaActual < horaCierre || (horaActual === horaCierre && minActual <= minCierre)) {\r\n        const horarioStr = `${horaActual.toString().padStart(2, '0')}:${minActual.toString().padStart(2, '0')}`;\r\n        \r\n        horarios.push({\r\n          hora: horarioStr,\r\n          disponible: !horariosOcupados.includes(horarioStr)\r\n        });\r\n\r\n        // Avanzar el tiempo\r\n        minActual += duracion;\r\n        if (minActual >= 60) {\r\n          horaActual += Math.floor(minActual / 60);\r\n          minActual = minActual % 60;\r\n        }\r\n      }\r\n\r\n      // Validación mínima de resultados\r\n      if (horarios.length === 0) {\r\n        console.error('No se generaron horarios con la configuración:', config);\r\n        throw new Error('No se pudieron generar horarios');\r\n      }\r\n\r\n      return horarios;\r\n    },\r\n\r\n    // Verificar disponibilidad básica\r\n    async verificarDisponibilidad(fecha, horario) {\r\n      try {\r\n        const snapshot = await db.collection('turnos')\r\n          .where('fecha', '==', fecha)\r\n          .where('horario', '==', horario)\r\n          .limit(1)\r\n          .get();\r\n          \r\n        return snapshot.empty;\r\n      } catch (error) {\r\n        console.error(\"Error verificando disponibilidad:\", error);\r\n        \r\n        // Fallback: verificar solo por fecha si falla la consulta compuesta\r\n        if (error.code === 'failed-precondition') {\r\n          const snapshot = await db.collection('turnos')\r\n            .where('fecha', '==', fecha)\r\n            .get();\r\n            \r\n          const ocupado = snapshot.docs.some(doc => doc.data().horario === horario);\r\n          return !ocupado;\r\n        }\r\n        \r\n        throw error; // Relanzar otros errores\r\n      }\r\n    },\r\n\r\n    // Verificar solapamientos\r\n    async obtenerTurnosSolapados(fecha, horario, duracion) {\r\n      const [horaStr, minutoStr] = horario.split(':');\r\n      const horaInicio = parseInt(horaStr);\r\n      const minutoInicio = parseInt(minutoStr);\r\n      \r\n      const minutoFin = minutoInicio + duracion;\r\n      const horaFin = horaInicio + Math.floor(minutoFin / 60);\r\n      const minutoFinAjustado = minutoFin % 60;\r\n      const horarioFin = `${horaFin.toString().padStart(2, '0')}:${minutoFinAjustado.toString().padStart(2, '0')}`;\r\n      \r\n      const snapshot = await db.collection('turnos')\r\n        .where('fecha', '==', fecha)\r\n        .where('horario', '>=', horario)\r\n        .where('horario', '<', horarioFin)\r\n        .get();\r\n        \r\n      return snapshot.docs.map(doc => doc.data());\r\n    },\r\n\r\n    // Bloqueo temporal\r\n    async bloquearTurnoTemporal(fecha, horario, userId) {\r\n      const docRef = await db.collection('bloqueos_temporales').add({\r\n        fecha,\r\n        horario,\r\n        userId,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        expiresAt: new Date(Date.now() + 5*60*1000) // 5 minutos de expiración\r\n      });\r\n      return docRef.id; // Devolver el ID automático\r\n    },\r\n\r\n    async eliminarBloqueoTemporal(bloqueoId) {\r\n      await db.collection('bloqueos_temporales').doc(bloqueoId).delete();\r\n    },\r\n\r\n    // Guardar turno\r\n    async guardarTurno(turnoData) {\r\n      try {\r\n        const docRef = await db.collection('turnos').add({\r\n          ...turnoData,\r\n          estado: 'pendiente', // Asegurar estado inicial\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          actualizadoEl: firebase.firestore.FieldValue.serverTimestamp()\r\n        });\r\n        \r\n        return { id: docRef.id, ...turnoData };\r\n      } catch (error) {\r\n        console.error(\"Error guardando turno:\", error);\r\n        throw error; // Relanzar para manejo superior\r\n      }\r\n    }\r\n  };\r\n})();","const ADMIN_UID = 'lnYDaOVZYOZLi9GyDdomUOZBf5p1';\r\n\r\n// Elementos del DOM\r\nconst elements = {\r\n  authContainer: document.getElementById('auth-container'),\r\n  adminPanel: document.getElementById('admin-panel'),\r\n  loginBtn: document.getElementById('btn-admin-login'),\r\n  logoutBtn: document.getElementById('logout-btn'),\r\n  calendar: document.getElementById('calendar'),\r\n  turnosList: document.getElementById('turnos-list'),\r\n  fechaTitulo: document.getElementById('fecha-titulo'),\r\n  modalEditar: document.getElementById('modal-editar'),\r\n  formEditar: document.getElementById('form-editar'),\r\n  btnEliminar: document.querySelector('.btn-eliminar'),\r\n  btnEliminarModal: document.getElementById('btn-eliminar-modal'),\r\n  closeModal: document.querySelector('.close-modal')\r\n};\r\n\r\nlet calendar;\r\nlet currentTurnoId = null;\r\n\r\nasync function verificarFirestore() {\r\n  try {\r\n    const config = await obtenerConfiguracion();\r\n    console.log(\"Configuración cargada correctamente:\", config);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error conectando con Firestore:\", error);\r\n    alert(\"Error al conectar con la base de datos. Recargando...\");\r\n    setTimeout(() => location.reload(), 3000);\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function initAdmin() {\r\n\r\n  if (!(await verificarFirestore())) return;\r\n  \r\n  if (!elements.authContainer) return;\r\n\r\n  firebase.auth().onAuthStateChanged(handleAuthState);\r\n  \r\n  if (elements.loginBtn) {\r\n    elements.loginBtn.addEventListener('click', signInWithGoogle);\r\n  }\r\n  \r\n  if (elements.logoutBtn) {\r\n    elements.logoutBtn.addEventListener('click', signOut);\r\n  }\r\n\r\n  // Eventos del modal\r\n  if (elements.closeModal) {\r\n    elements.closeModal.addEventListener('click', () => {\r\n      elements.modalEditar.style.display = 'none';\r\n    });\r\n  }\r\n\r\n  if (elements.formEditar) {\r\n    elements.formEditar.addEventListener('submit', async (e) => {\r\n      e.preventDefault();\r\n      await guardarCambiosTurno();\r\n    });\r\n  }\r\n\r\n  // Eliminar cualquier listener previo del botón eliminar\r\n  const btnEliminarModal = document.getElementById('btn-eliminar-modal');\r\n  if (btnEliminarModal) {\r\n    btnEliminarModal.onclick = null;\r\n  }\r\n\r\n  // Cerrar modal al hacer click fuera\r\n  window.addEventListener('click', (e) => {\r\n    if (e.target === elements.modalEditar) {\r\n      elements.modalEditar.style.display = 'none';\r\n    }\r\n  });\r\n}\r\n\r\n// Agregar estas funciones al inicio del admin.js\r\nasync function obtenerConfiguracion() {\r\n  try {\r\n    const doc = await db.collection('config').doc('horarios').get();\r\n    if (!doc.exists) return obtenerConfiguracionPorDefecto();\r\n    \r\n    const data = doc.data();\r\n    \r\n    // Función robusta para normalizar días laborales\r\n    const normalizarDias = (dias) => {\r\n      if (!dias) return [1,2,3,4,5];\r\n      \r\n      // Caso: array con string JSON ['[1,2,3,4,5]']\r\n      if (Array.isArray(dias) && dias.length === 1 && typeof dias[0] === 'string') {\r\n        try {\r\n          return JSON.parse(dias[0].replace(/'/g, '\"')).map(Number);\r\n        } catch (e) {\r\n          console.warn(\"Error parseando array con string JSON\", e);\r\n        }\r\n      }\r\n      \r\n      // Caso: string \"[1,2,3,4,5]\"\r\n      if (typeof dias === 'string' && dias.startsWith('[')) {\r\n        try {\r\n          return JSON.parse(dias.replace(/'/g, '\"')).map(Number);\r\n        } catch (e) {\r\n          console.warn(\"Error parseando string JSON\", e);\r\n        }\r\n      }\r\n      \r\n      // Caso: array de números [1,2,3,4,5]\r\n      if (Array.isArray(dias)) return dias.map(Number);\r\n      \r\n      // Caso: string simple \"1,2,3,4,5\"\r\n      if (typeof dias === 'string') {\r\n        return dias.split(',').map(Number).filter(n => !isNaN(n));\r\n      }\r\n      \r\n      return [1,2,3,4,5]; // Default\r\n    };\r\n    \r\n    const diasLaborales = normalizarDias(data.diasLaborales)\r\n      .filter(n => n >= 0 && n <= 6) // Filtrar valores inválidos\r\n      .sort((a, b) => a - b); // Ordenar\r\n    \r\n    return {\r\n      horarioApertura: data.horarioApertura || \"09:00\",\r\n      horarioCierre: data.horarioCierre || \"19:00\",\r\n      duracionTurno: data.duracionTurno || 30,\r\n      diasLaborales: diasLaborales.length > 0 ? diasLaborales : [1,2,3,4,5]\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error obteniendo configuración:\", error);\r\n    return obtenerConfiguracionPorDefecto();\r\n  }\r\n}\r\n\r\nfunction obtenerConfiguracionPorDefecto() {\r\n  return {\r\n    horarioApertura: \"09:00\",\r\n    horarioCierre: \"19:00\",\r\n    duracionTurno: 30,\r\n    diasLaborales: [1,2,3,4,5] // Lunes a Viernes\r\n  };\r\n}\r\n\r\nfunction validarHorario(horario, config) {\r\n  // Convertir horario a minutos desde medianoche\r\n  const [horas, minutos] = horario.split(':').map(Number);\r\n  const horarioEnMinutos = horas * 60 + minutos;\r\n  \r\n  // Convertir horarios de apertura/cierre\r\n  const [aperturaH, aperturaM] = config.horarioApertura.split(':').map(Number);\r\n  const [cierreH, cierreM] = config.horarioCierre.split(':').map(Number);\r\n  const aperturaEnMinutos = aperturaH * 60 + aperturaM;\r\n  const cierreEnMinutos = cierreH * 60 + cierreM;\r\n  \r\n  // Validar que esté dentro del horario laboral\r\n  if (horarioEnMinutos < aperturaEnMinutos || horarioEnMinutos >= cierreEnMinutos) {\r\n    return {\r\n      valido: false,\r\n      mensaje: `El horario debe estar entre ${config.horarioApertura} y ${config.horarioCierre}`\r\n    };\r\n  }\r\n  \r\n  // Validar que sea en intervalos de 30 minutos\r\n  if (minutos % config.duracionTurno !== 0) {\r\n    return {\r\n      valido: false,\r\n      mensaje: `Los turnos deben ser en intervalos de ${config.duracionTurno} minutos (ej: 09:00, 09:30, etc.)`\r\n    };\r\n  }\r\n  \r\n  return { valido: true };\r\n}\r\n\r\nasync function handleAuthState(user) {\r\n  if (user && user.uid === ADMIN_UID) {\r\n    await showAdminPanel();\r\n    await initCalendar();\r\n    await loadTurnosForDate(new Date().toISOString().split('T')[0]);\r\n  } else {\r\n    showLoginScreen();\r\n  }\r\n}\r\n\r\nasync function showAdminPanel() {\r\n  if (elements.authContainer) elements.authContainer.style.display = 'none';\r\n  if (elements.adminPanel) elements.adminPanel.style.display = 'block';\r\n}\r\n\r\nfunction showLoginScreen() {\r\n  if (elements.authContainer) elements.authContainer.style.display = 'flex';\r\n  if (elements.adminPanel) elements.adminPanel.style.display = 'none';\r\n  if (calendar) calendar.destroy();\r\n}\r\n\r\nasync function signInWithGoogle() {\r\n  try {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    await firebase.auth().signInWithPopup(provider);\r\n  } catch (error) {\r\n    console.error(\"Error de autenticación:\", error);\r\n    alert(\"Error al iniciar sesión: \" + error.message);\r\n  }\r\n}\r\n\r\nasync function signOut() {\r\n  try {\r\n    await firebase.auth().signOut();\r\n  } catch (error) {\r\n    console.error(\"Error al cerrar sesión:\", error);\r\n  }\r\n}\r\n\r\nasync function initCalendar() {\r\n  if (!elements.calendar) return;\r\n  \r\n  calendar = new FullCalendar.Calendar(elements.calendar, {\r\n    initialView: 'dayGridMonth',\r\n    locale: 'es',\r\n    headerToolbar: {\r\n      left: 'prev,next today',\r\n      center: 'title',\r\n      right: 'none'\r\n    },\r\n    selectable: true,\r\n    selectMirror: true,\r\n    dayMaxEvents: true,\r\n    selectOverlap: false,\r\n    \r\n    dateClick: async function(info) {\r\n      // Remover la clase de selección de todas las celdas primero\r\n      document.querySelectorAll('.fc-daygrid-day-selected').forEach(el => {\r\n        el.classList.remove('fc-daygrid-day-selected');\r\n      });\r\n      \r\n      // Añadir la clase de selección a la celda clickeada\r\n      info.dayEl.classList.add('fc-daygrid-day-selected');\r\n      \r\n      // Cargar los turnos para la fecha seleccionada\r\n      await loadTurnosForDate(info.dateStr);\r\n    },\r\n    \r\n    events: async function(fetchInfo, successCallback, failureCallback) {\r\n      try {\r\n        const snapshot = await db.collection('turnos')\r\n          .where('fecha', '>=', fetchInfo.startStr)\r\n          .where('fecha', '<=', fetchInfo.endStr)\r\n          .get();\r\n        \r\n        const events = snapshot.docs.map(doc => {\r\n          const data = doc.data();\r\n          return {\r\n            id: doc.id,\r\n            title: `${data.cliente} - ${data.servicios.join(', ')}`,\r\n            start: `${data.fecha}T${data.horario}`,\r\n            allDay: false,\r\n            extendedProps: {\r\n              cliente: data.cliente,\r\n              telefono: data.telefono,\r\n              email: data.email,\r\n              servicios: data.servicios,\r\n              observaciones: data.observaciones,\r\n              estado: data.estado || 'pendiente'\r\n            },\r\n            className: `fc-event-${data.estado || 'pendiente'}`,\r\n            borderColor: 'transparent'\r\n          };\r\n        });\r\n        \r\n        successCallback(events);\r\n      } catch (error) {\r\n        console.error(\"Error cargando eventos:\", error);\r\n        failureCallback(error);\r\n      }\r\n    },\r\n    \r\n    eventClick: function(info) {\r\n      abrirModalEdicion(info.event);\r\n    },\r\n    \r\n    select: function(info) {\r\n      calendar.unselect();\r\n    },\r\n    \r\n    dayMaxEventRows: false,\r\n    views: {\r\n      dayGridMonth: {\r\n        dayMaxEventRows: false,\r\n        displayEventTime: false\r\n      },\r\n      timeGridWeek: {\r\n        dayMaxEventRows: true\r\n      },\r\n      timeGridDay: {\r\n        dayMaxEventRows: true\r\n      }\r\n    },\r\n    \r\n    // Limpiar selección al cambiar de vista\r\n    viewDidMount: function() {\r\n      document.querySelectorAll('.fc-daygrid-day-selected').forEach(el => {\r\n        el.classList.remove('fc-daygrid-day-selected');\r\n      });\r\n    }\r\n  });\r\n  \r\n  calendar.render();\r\n}\r\n\r\nfunction getEventColor(estado) {\r\n  switch(estado) {\r\n    case 'confirmado': return '#4CAF50';\r\n    case 'cancelado': return '#F44336';\r\n    case 'completado': return '#2196F3';\r\n    default: return '#FF9800';\r\n  }\r\n}\r\n\r\nasync function loadTurnosForDate(date) {\r\n  try {\r\n    // Corregir formato de fecha para el título\r\n    const fechaObj = new Date(date);\r\n    // Ajustar por zona horaria\r\n    const fechaAjustada = new Date(fechaObj.getTime() + fechaObj.getTimezoneOffset() * 60000);\r\n    \r\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n    elements.fechaTitulo.textContent = `Turnos para ${fechaAjustada.toLocaleDateString('es-AR', options)}`;\r\n    \r\n    const snapshot = await db.collection('turnos')\r\n      .where('fecha', '==', date)\r\n      .orderBy('horario', 'asc')\r\n      .get();\r\n    \r\n    renderTurnos(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n  } catch (error) {\r\n    console.error(\"Error cargando turnos:\", error);\r\n    elements.turnosList.innerHTML = '<p>Error al cargar los turnos. Intente nuevamente.</p>';\r\n  }\r\n}\r\n\r\nfunction renderTurnos(turnos) {\r\n  if (!elements.turnosList) return;\r\n  \r\n  if (turnos.length === 0) {\r\n    elements.turnosList.innerHTML = '<p class=\"sin-turnos\">No hay turnos para esta fecha.</p>';\r\n    return;\r\n  }\r\n  \r\n  elements.turnosList.innerHTML = turnos.map(turno => `\r\n    <div class=\"turno-card\" data-id=\"${turno.id}\">\r\n      <div class=\"turno-header\" data-id=\"${turno.id}\">\r\n        <div class=\"turno-sumario\">\r\n          <span class=\"turno-horario\">${turno.horario}</span>\r\n          <span class=\"turno-cliente\">${turno.cliente}</span>\r\n          <span class=\"turno-estado ${turno.estado || 'pendiente'}\">${turno.estado || 'pendiente'}</span>\r\n        </div>\r\n        <span class=\"toggle-icon\">▼</span>\r\n      </div>\r\n      <div class=\"turno-detalles\">\r\n        <div class=\"turno-info\">\r\n          <p><strong>Servicios:</strong> ${turno.servicios.join(', ')}</p>\r\n          <p><strong>Teléfono:</strong> ${turno.telefono}</p>\r\n          <p><strong>Email:</strong> ${turno.email}</p>\r\n          ${turno.observaciones ? `<p><strong>Observaciones:</strong> ${turno.observaciones}</p>` : ''}\r\n        </div>\r\n        <div class=\"turno-actions\">\r\n          <button class=\"btn-editar\" data-id=\"${turno.id}\">Editar</button>\r\n          <button class=\"btn-eliminar-lista\" data-id=\"${turno.id}\">Eliminar</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `).join('');\r\n  \r\n  // Configurar eventos para expandir/colapsar\r\n  document.querySelectorAll('.turno-header').forEach(header => {\r\n    header.addEventListener('click', function(e) {\r\n      // Evitar que se active si se hace click en un botón de acción\r\n      if (e.target.tagName === 'BUTTON') return;\r\n      \r\n      const card = this.closest('.turno-card');\r\n      const detalles = card.querySelector('.turno-detalles');\r\n      const icon = this.querySelector('.toggle-icon');\r\n      \r\n      card.classList.toggle('expanded');\r\n      detalles.style.display = card.classList.contains('expanded') ? 'block' : 'none';\r\n      icon.textContent = card.classList.contains('expanded') ? '▲' : '▼';\r\n    });\r\n  });\r\n  \r\n  // Configurar eventos para los botones eliminar (existente)\r\n  document.querySelectorAll('.btn-eliminar-lista').forEach(btn => {\r\n    btn.addEventListener('click', async (e) => {\r\n      e.stopPropagation();\r\n      const turnoId = e.currentTarget.getAttribute('data-id');\r\n      \r\n      if (confirm('¿Estás seguro de eliminar este turno?')) {\r\n        const loading = mostrarLoading();\r\n        try {\r\n          await eliminarTurno(turnoId);\r\n          const fechaActual = new Date().toISOString().split('T')[0];\r\n          await loadTurnosForDate(fechaActual);\r\n        } catch (error) {\r\n          console.error(\"Error eliminando desde lista:\", error);\r\n          alert(\"Error al eliminar el turno\");\r\n        } finally {\r\n          loading.remove();\r\n        }\r\n      }\r\n    });\r\n  });\r\n  \r\n  // Configurar eventos para los botones editar (existente)\r\n  document.querySelectorAll('.btn-editar').forEach(btn => {\r\n    btn.addEventListener('click', async (e) => {\r\n      e.stopPropagation();\r\n      const turnoId = e.currentTarget.getAttribute('data-id');\r\n      await abrirModalEdicionPorId(turnoId);\r\n    });\r\n  });\r\n}\r\n\r\nasync function abrirModalEdicion(event) {\r\n  try {\r\n    const config = await obtenerConfiguracion();\r\n    await generarOpcionesHorario(config);\r\n    \r\n    currentTurnoId = event.id;\r\n    \r\n    // Llenar solo los campos necesarios\r\n    document.getElementById('turno-id').value = event.id;\r\n    document.getElementById('edit-fecha').value = event.start.toISOString().split('T')[0];\r\n    \r\n    // Formatear hora (HH:MM)\r\n    const hora = event.start.getHours().toString().padStart(2, '0');\r\n    const minutos = event.start.getMinutes().toString().padStart(2, '0');\r\n    document.getElementById('edit-horario').value = `${hora}:${minutos}`;\r\n    \r\n    // Mostrar información del turno en el modal\r\n    document.getElementById('turno-info').innerHTML = `\r\n      <p><strong>Cliente:</strong> ${event.extendedProps.cliente}</p>\r\n      <p><strong>Servicios:</strong> ${event.extendedProps.servicios.join(', ')}</p>\r\n      <p><strong>Teléfono:</strong> ${event.extendedProps.telefono}</p>\r\n      <p><strong>Estado:</strong> ${event.extendedProps.estado || 'pendiente'}</p>\r\n    `;\r\n    \r\n    elements.modalEditar.style.display = 'block';\r\n  } catch (error) {\r\n    console.error(\"Error abriendo modal de edición:\", error);\r\n    alert(\"Error al cargar los datos del turno\");\r\n  }\r\n}\r\n\r\nasync function abrirModalEdicionPorId(turnoId) {\r\n  try {\r\n    const config = await obtenerConfiguracion();\r\n    await generarOpcionesHorario(config);\r\n    \r\n    const doc = await db.collection('turnos').doc(turnoId).get();\r\n    if (!doc.exists) {\r\n      alert('Turno no encontrado');\r\n      return;\r\n    }\r\n    \r\n    const turno = doc.data();\r\n    currentTurnoId = turnoId;\r\n    \r\n    // Llenar solo los campos necesarios para el formulario simplificado\r\n    document.getElementById('turno-id').value = turnoId;\r\n    document.getElementById('edit-fecha').value = turno.fecha;\r\n    document.getElementById('edit-horario').value = turno.horario;\r\n    \r\n    // Mostrar información del turno en el modal\r\n    document.getElementById('turno-info').innerHTML = `\r\n      <p><strong>Cliente:</strong> ${turno.cliente}</p>\r\n      <p><strong>Servicios:</strong> ${Array.isArray(turno.servicios) ? turno.servicios.join(', ') : turno.servicios}</p>\r\n      <p><strong>Teléfono:</strong> ${turno.telefono}</p>\r\n      <p><strong>Estado:</strong> ${turno.estado || 'pendiente'}</p>\r\n    `;\r\n    \r\n    // Configurar el botón eliminar del modal\r\n    const btnEliminarModal = document.getElementById('btn-eliminar-modal');\r\n    if (btnEliminarModal) {\r\n      btnEliminarModal.onclick = async (e) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        \r\n        if (confirm('¿Estás seguro de eliminar este turno permanentemente?')) {\r\n          try {\r\n            const success = await eliminarTurno(currentTurnoId);\r\n            if (success) {\r\n              // Actualizar la vista\r\n              await loadTurnosForDate(turno.fecha);\r\n              calendar.refetchEvents();\r\n              elements.modalEditar.style.display = 'none';\r\n              alert('Turno eliminado correctamente');\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error al eliminar turno:\", error);\r\n            alert(\"Error al eliminar el turno: \" + error.message);\r\n          }\r\n        }\r\n      };\r\n    }\r\n    \r\n    elements.modalEditar.style.display = 'block';\r\n  } catch (error) {\r\n    console.error(\"Error abriendo modal de edición:\", error);\r\n    alert(\"Error al cargar los datos del turno\");\r\n  }\r\n}\r\n\r\nfunction configurarModalEliminar() {\r\n  const btnEliminarModal = document.getElementById('btn-eliminar-modal');\r\n  if (!btnEliminarModal) return;\r\n\r\n  // Limpiar eventos previos\r\n  btnEliminarModal.onclick = null;\r\n  \r\n  // Asignar nuevo evento\r\n  btnEliminarModal.onclick = async (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    if (!currentTurnoId) {\r\n      console.error('No hay turno seleccionado');\r\n      return;\r\n    }\r\n\r\n    if (confirm('¿Estás seguro de eliminar este turno permanentemente?')) {\r\n      const loadingIndicator = mostrarLoading();\r\n      try {\r\n        await eliminarTurno(currentTurnoId);\r\n      } catch (error) {\r\n        console.error(\"Error en eliminación:\", error);\r\n      } finally {\r\n        loadingIndicator.remove();\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction mostrarLoading() {\r\n  const loading = document.createElement('div');\r\n  loading.className = 'loading-indicator';\r\n  loading.textContent = 'Procesando...';\r\n  document.body.appendChild(loading);\r\n  return loading;\r\n}\r\n\r\nasync function generarOpcionesHorario(config) {\r\n  const selectHorario = document.getElementById('edit-horario');\r\n  selectHorario.innerHTML = '';\r\n  \r\n  // Convertir horarios de apertura/cierre a minutos\r\n  const [aperturaH, aperturaM] = config.horarioApertura.split(':').map(Number);\r\n  const [cierreH, cierreM] = config.horarioCierre.split(':').map(Number);\r\n  \r\n  let horaActual = aperturaH;\r\n  let minutoActual = aperturaM;\r\n  \r\n  while (horaActual < cierreH || (horaActual === cierreH && minutoActual < cierreM)) {\r\n    const horaStr = horaActual.toString().padStart(2, '0');\r\n    const minutoStr = minutoActual.toString().padStart(2, '0');\r\n    const option = document.createElement('option');\r\n    option.value = `${horaStr}:${minutoStr}`;\r\n    option.textContent = `${horaStr}:${minutoStr}`;\r\n    selectHorario.appendChild(option);\r\n    \r\n    // Avanzar el tiempo\r\n    minutoActual += config.duracionTurno;\r\n    if (minutoActual >= 60) {\r\n      horaActual += Math.floor(minutoActual / 60);\r\n      minutoActual = minutoActual % 60;\r\n    }\r\n  }\r\n}\r\n\r\nasync function verificarDisponibilidad(fecha, horario, turnoId = null) {\r\n  try {\r\n    const config = await obtenerConfiguracion();\r\n    \r\n    // Convertir horario a minutos\r\n    const [hora, minuto] = horario.split(':').map(Number);\r\n    const inicioEnMinutos = hora * 60 + minuto;\r\n    const finEnMinutos = inicioEnMinutos + config.duracionTurno;\r\n    \r\n    // Convertir a formato HH:MM para la consulta\r\n    const horarioFin = `${Math.floor(finEnMinutos / 60).toString().padStart(2, '0')}:${(finEnMinutos % 60).toString().padStart(2, '0')}`;\r\n    \r\n    // Consultar todos los turnos para la fecha\r\n    let query = db.collection('turnos').where('fecha', '==', fecha);\r\n    \r\n    const snapshot = await query.get();\r\n    \r\n    // Filtrar localmente los turnos que se solapan\r\n    const turnosSolapados = snapshot.docs.filter(doc => {\r\n      // Si estamos editando, excluir el turno actual\r\n      if (turnoId && doc.id === turnoId) return false;\r\n      \r\n      const turno = doc.data();\r\n      const [turnoHora, turnoMinuto] = turno.horario.split(':').map(Number);\r\n      const turnoInicio = turnoHora * 60 + turnoMinuto;\r\n      const turnoFin = turnoInicio + config.duracionTurno;\r\n      \r\n      // Verificar solapamiento\r\n      return (inicioEnMinutos < turnoFin && finEnMinutos > turnoInicio);\r\n    });\r\n    \r\n    return {\r\n      disponible: turnosSolapados.length === 0,\r\n      mensaje: turnosSolapados.length > 0 ? `El horario se solapa con otro turno existente` : null\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error verificando disponibilidad:\", error);\r\n    return {\r\n      disponible: false,\r\n      mensaje: \"Error al verificar disponibilidad\"\r\n    };\r\n  }\r\n}\r\n\r\nasync function guardarCambiosTurno() {\r\n  if (!currentTurnoId) {\r\n    console.error('currentTurnoId no definido');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const user = firebase.auth().currentUser;\r\n    if (!user || user.uid !== ADMIN_UID) {\r\n      alert('No tienes permisos para realizar esta acción');\r\n      return;\r\n    }\r\n\r\n    const config = await obtenerConfiguracion();\r\n    const horario = document.getElementById('edit-horario').value;\r\n    const fechaInput = document.getElementById('edit-fecha').value;\r\n    \r\n    // Debug: Mostrar información de validación\r\n    console.log(\"Validando turno para:\", fechaInput, horario);\r\n    console.log(\"Configuración actual:\", config);\r\n\r\n    // Validar horario\r\n    const validacionHorario = validarHorario(horario, config);\r\n    if (!validacionHorario.valido) {\r\n      alert(validacionHorario.mensaje);\r\n      return;\r\n    }\r\n    \r\n    // Crear fecha sin problemas de zona horaria (formato YYYY-MM-DD)\r\n    const [year, month, day] = fechaInput.split('-').map(Number);\r\n    const fechaObj = new Date(year, month - 1, day);\r\n    \r\n    // Obtener día de la semana (0=Domingo, 1=Lunes, ..., 6=Sábado)\r\n    const diaSemana = fechaObj.getDay();\r\n    \r\n    // Debug: Verificar valores\r\n    console.log(\"Fecha seleccionada:\", fechaInput);\r\n    console.log(\"Día de la semana calculado:\", diaSemana);\r\n    console.log(\"Días laborales configurados:\", config.diasLaborales);\r\n    \r\n    // Validar día laboral\r\n    if (!config.diasLaborales.includes(diaSemana)) {\r\n      const diasNombres = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];\r\n      alert(`No se pueden agendar turnos los ${diasNombres[diaSemana]}s`);\r\n      return;\r\n    }\r\n    \r\n    // Verificar disponibilidad\r\n    const disponibilidad = await verificarDisponibilidad(fechaInput, horario, currentTurnoId);\r\n    if (!disponibilidad.disponible) {\r\n      alert(disponibilidad.mensaje);\r\n      return;\r\n    }\r\n    \r\n    // Solo actualizar fecha y horario\r\n    const turnoActualizado = {\r\n      fecha: fechaInput,\r\n      horario: horario,\r\n      actualizadoEl: firebase.firestore.FieldValue.serverTimestamp()\r\n    };\r\n    \r\n    await db.collection('turnos').doc(currentTurnoId).update(turnoActualizado);\r\n    \r\n    // Actualizar la vista\r\n    await loadTurnosForDate(fechaInput);\r\n    if (calendar) {\r\n      calendar.refetchEvents();\r\n    }\r\n    elements.modalEditar.style.display = 'none';\r\n    \r\n    alert('Turno actualizado correctamente');\r\n  } catch (error) {\r\n    console.error(\"Error actualizando turno:\", error);\r\n    alert(\"Error al actualizar el turno: \" + error.message);\r\n  }\r\n}\r\n\r\nasync function eliminarTurno(turnoId) {\r\n  // Validación mejorada del ID\r\n  if (!turnoId || typeof turnoId !== 'string') {\r\n    console.error('ID de turno inválido:', turnoId);\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    console.log('Iniciando eliminación para ID:', turnoId);\r\n    \r\n    // Obtener la fecha del turno antes de eliminarlo\r\n    const doc = await db.collection('turnos').doc(turnoId).get();\r\n    if (!doc.exists) {\r\n      alert('El turno ya no existe');\r\n      return false;\r\n    }\r\n    \r\n    const fechaTurno = doc.data().fecha;\r\n    \r\n    // Eliminar el documento\r\n    await db.collection('turnos').doc(turnoId).delete();\r\n    console.log('Turno eliminado con éxito');\r\n    \r\n    // Actualizar la vista\r\n    await loadTurnosForDate(fechaTurno);\r\n    \r\n    // Refrescar calendario\r\n    if (calendar) {\r\n      calendar.refetchEvents();\r\n    }\r\n    \r\n    // Cerrar modal si está abierto\r\n    if (elements.modalEditar) {\r\n      elements.modalEditar.style.display = 'none';\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al eliminar:', error);\r\n    alert('Error al eliminar el turno: ' + (error.message || 'Por favor intente nuevamente'));\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction setupModalEvents() {\r\n  const modal = document.getElementById('modal-editar');\r\n  const btnEliminar = document.getElementById('btn-eliminar-modal');\r\n  \r\n  if (btnEliminar) {\r\n    btnEliminar.onclick = async (e) => {\r\n      e.stopPropagation(); // Detener la propagación\r\n      e.preventDefault(); // Prevenir comportamiento por defecto\r\n      \r\n      if (!currentTurnoId) {\r\n        console.error('No hay turno seleccionado');\r\n        return;\r\n      }\r\n\r\n      if (confirm('¿Estás seguro de eliminar este turno permanentemente?')) {\r\n        try {\r\n          const success = await eliminarTurno(currentTurnoId);\r\n          if (success) {\r\n            // Actualizar la vista\r\n            const fechaActual = new Date().toISOString().split('T')[0];\r\n            await loadTurnosForDate(fechaActual);\r\n            calendar.refetchEvents();\r\n            modal.style.display = 'none';\r\n            alert('Turno eliminado correctamente');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error en el proceso de eliminación:', error);\r\n          alert('Error al eliminar el turno: ' + (error.message || 'Por favor intente nuevamente'));\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', initAdmin);","(() => {\r\n  window.enviarEmailConfirmacion = async (datosTurno) => {\r\n    try {\r\n      const emailData = {\r\n        senderName: window.brevoConfig.senderName,\r\n        senderEmail: window.brevoConfig.senderEmail,\r\n        to: [{ email: datosTurno.email, name: datosTurno.nombre }],\r\n        subject: `Confirmación de turno - ${datosTurno.fecha} a las ${datosTurno.horario}`,\r\n        htmlContent: `\r\n          <!DOCTYPE html>\r\n          <html>\r\n          <head>\r\n              <style>\r\n                  body { font-family: 'Poppins', sans-serif; line-height: 1.6; color: #333; }\r\n                  .container { max-width: 600px; margin: 0 auto; padding: 20px; }\r\n                  .header { background-color: #f8f1e9; padding: 20px; text-align: center; }\r\n                  .content { padding: 20px; }\r\n                  .footer { text-align: center; font-size: 12px; color: #777; margin-top: 20px; }\r\n                  .resumen { margin-top: 20px; border-top: 1px solid #eee; padding-top: 20px; }\r\n                  .servicio { margin-bottom: 5px; }\r\n              </style>\r\n          </head>\r\n          <body>\r\n              <div class=\"container\">\r\n                  <div class=\"header\">\r\n                      <h2>Esvelta Peluquería</h2>\r\n                      <p>¡Tu turno ha sido confirmado!</p>\r\n                  </div>\r\n                  \r\n                  <div class=\"content\">\r\n                      <p>Hola <strong>${datosTurno.nombre}</strong>,</p>\r\n                      <p>Tu turno ha sido reservado con éxito. A continuación los detalles:</p>\r\n                      \r\n                      <div class=\"resumen\">\r\n                          <h3>Resumen de tu reserva</h3>\r\n                          <p><strong>Fecha:</strong> ${datosTurno.fecha}</p>\r\n                          <p><strong>Hora:</strong> ${datosTurno.horario}</p>\r\n                          <p><strong>Servicios:</strong></p>\r\n                          <ul>\r\n                              ${datosTurno.servicios.map(s => `<li class=\"servicio\">${s}</li>`).join('')}\r\n                          </ul>\r\n                          <p><strong>Seña abonada:</strong> $${datosTurno.reserva.toLocaleString()}</p>\r\n                          <p><strong>Saldo pendiente:</strong> $${(datosTurno.montoTotal - datosTurno.reserva).toLocaleString()}</p>\r\n                      </div>\r\n                      \r\n                      <p>Si necesitas modificar o cancelar tu turno, por favor contáctanos respondiendo este email.</p>\r\n                  </div>\r\n                  \r\n                  <div class=\"footer\">\r\n                      <p>© ${new Date().getFullYear()} Esvelta Peluquería. Todos los derechos reservados.</p>\r\n                  </div>\r\n              </div>\r\n          </body>\r\n          </html>\r\n        `\r\n      };\r\n\r\n      // Opcional: enviar copia al admin\r\n      if (window.brevoConfig.adminEmail) {\r\n        emailData.bcc = [{ email: window.brevoConfig.adminEmail, name: 'Administrador Esvelta' }];\r\n      }\r\n\r\n      // Llamar a la Cloud Function\r\n      const enviarEmail = firebase.functions().httpsCallable('enviarEmailConfirmacion');\r\n      const resultado = await enviarEmail(emailData);\r\n      \r\n      return resultado.data.success;\r\n    } catch (error) {\r\n      console.error('Error en enviarEmailConfirmacion:', error);\r\n      return false;\r\n    }\r\n  };\r\n})();","// Variables globales\r\nlet pasoActual = 1;\r\nconst totalPasos = 5; // Ahora son 5 pasos antes de confirmación\r\nlet datosReserva = {\r\n    servicios: [],\r\n    precios: {\r\n        \"Corte\": 15000,\r\n        \"Teñido\": 40000,\r\n        \"Alisado\": 30000\r\n    },\r\n    reserva: 5000,\r\n    fecha: null,\r\n    horario: null,\r\n    nombre: null,\r\n    email: null,\r\n    telefono: null,\r\n    observacion: null\r\n};\r\n\r\nlet usuarioActual = null;\r\n\r\n// Elementos DOM\r\nconst elementos = {\r\n    progreso: document.getElementById('progreso'),\r\n    btnAnterior: document.querySelector('.btn-anterior'),\r\n    btnSiguiente: document.querySelector('.btn-siguiente'),\r\n    pasos: document.querySelectorAll('.paso'),\r\n    // Elementos de resumen\r\n    resumenNombre: document.getElementById('cliente-nombre'),\r\n    resumenEmail: document.getElementById('cliente-email'),\r\n    resumenTelefono: document.getElementById('cliente-telefono'),\r\n    resumenServicio: document.getElementById('servicio-seleccionado'),\r\n    resumenFecha: document.getElementById('fecha-seleccionada'),\r\n    resumenHorario: document.getElementById('horario-seleccionado'),\r\n    resumenObservacion: document.getElementById('observacion-texto')\r\n};\r\n\r\n// Usar las referencias globales con validación\r\nconst auth = window.firebaseAuth || {\r\n  onAuthStateChanged: () => console.warn('Auth no inicializado'),\r\n  // otras funciones mock para desarrollo\r\n};\r\n\r\nif (!window.firestoreDB) {\r\n  console.error('Firestore no está disponible');\r\n  // Podrías mostrar un mensaje al usuario o deshabilitar funcionalidad\r\n}\r\n\r\n// Prueba de conexión (puedes eliminar esto después)\r\nasync function probarConexion() {\r\n  try {\r\n    console.log(\"Probando conexión a Firestore...\");\r\n    \r\n    // 1. Obtener configuración\r\n    const config = await firestoreDB.obtenerConfiguracion();\r\n    console.log(\"Configuración obtenida:\", config);\r\n    \r\n    // 2. Obtener turnos de hoy\r\n    const hoy = new Date().toISOString().split('T')[0];\r\n    const turnos = await firestoreDB.obtenerTurnosPorFecha(hoy);\r\n    console.log(`Turnos para hoy (${hoy}):`, turnos);\r\n    \r\n    // 3. Generar horarios disponibles para hoy\r\n    const horarios = await firestoreDB.generarHorariosDisponibles(hoy);\r\n    console.log(\"Horarios disponibles hoy:\", horarios);\r\n    \r\n  } catch (error) {\r\n    console.error(\"Error en prueba de conexión:\", error);\r\n  }\r\n}\r\n\r\n// Inicialización\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n  // Verificar si hay usuario en LocalStorage\r\n  const usuarioLS = localStorage.getItem('usuario');\r\n  if (usuarioLS) {\r\n    const user = JSON.parse(usuarioLS);\r\n    actualizarUIUsuario(user);\r\n  }\r\n\r\n  if (document.querySelector('.contenedor-pasos')) {\r\n    probarConexion();\r\n    inicializarEventos();\r\n    actualizarInterfaz();\r\n    inicializarAuth();\r\n    inicializarDisponibilidad();\r\n  }\r\n});\r\n\r\nfunction mostrarError(mensaje) {\r\n  const errorContainer = document.createElement('div');\r\n  errorContainer.className = 'error-global';\r\n  errorContainer.innerHTML = `\r\n    <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\r\n      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/>\r\n    </svg>\r\n    <span>${mensaje}</span>\r\n  `;\r\n  \r\n  document.body.appendChild(errorContainer);\r\n  setTimeout(() => errorContainer.remove(), 5000);\r\n}\r\n\r\n// Funciones principales\r\nfunction inicializarEventos() {\r\n    // Navegación\r\n    elementos.btnAnterior.addEventListener('click', retrocederPaso);\r\n    elementos.btnSiguiente.addEventListener('click', avanzarPaso);\r\n    \r\n    // Selección de servicios (manejo delegado)\r\n    document.querySelectorAll('.flotante.servicio').forEach(servicio => {\r\n        servicio.addEventListener('click', function() {\r\n            this.classList.toggle('seleccionado');\r\n            actualizarServiciosSeleccionados();\r\n        });\r\n    });\r\n    \r\n    // Fechas y horarios\r\n    document.querySelectorAll('.flotante.fecha').forEach(fecha => {\r\n        fecha.addEventListener('click', function() {\r\n            seleccionarElemento(this, 'fecha');\r\n        });\r\n    });\r\n    \r\n    document.querySelectorAll('.flotante.horario').forEach(horario => {\r\n        horario.addEventListener('click', async function() {\r\n            if (!this.classList.contains('ocupado')) {\r\n            const horarioSeleccionado = this.querySelector('.p1').textContent;\r\n            const validacion = await validarDisponibilidadCompleta(\r\n                datosReserva.fecha, \r\n                horarioSeleccionado\r\n            );\r\n            \r\n            if (validacion.disponible && validacion.turnosSolapados.length === 0) {\r\n                seleccionarElemento(this, 'horario');\r\n            } else {\r\n                mostrarError(validacion.mensaje || \"Horario no disponible\");\r\n            }\r\n            }\r\n        });\r\n    });\r\n    \r\n    // Validación en tiempo real\r\n    document.getElementById('nombre')?.addEventListener('input', validarNombre);\r\n    document.getElementById('email')?.addEventListener('input', validarEmail);\r\n    document.getElementById('telefono')?.addEventListener('input', validarTelefono);\r\n}\r\n\r\nfunction calcularSubtotal() {\r\n    const subtotal = datosReserva.servicios.reduce((total, servicio) => total + servicio.precio, 0);\r\n    document.getElementById('subtotal').textContent = `$${subtotal.toLocaleString()}`;\r\n    return subtotal;\r\n}\r\n\r\nfunction actualizarServiciosSeleccionados() {\r\n    const serviciosSeleccionados = document.querySelectorAll('.flotante.servicio.seleccionado');\r\n    datosReserva.servicios = Array.from(serviciosSeleccionados).map(serv => {\r\n        return {\r\n            nombre: serv.getAttribute('data-servicio'),\r\n            precio: datosReserva.precios[serv.getAttribute('data-servicio')]\r\n        };\r\n    });\r\n    \r\n    // Actualizar contador\r\n    document.getElementById('contador-servicios').textContent = datosReserva.servicios.length;\r\n    \r\n    // Ocultar error si hay selección\r\n    if (datosReserva.servicios.length > 0) {\r\n        document.getElementById('error-servicio').classList.remove('visible');\r\n    }\r\n    \r\n    // Calcular y mostrar subtotal\r\n    calcularSubtotal();\r\n}\r\n\r\nasync function avanzarPaso() {\r\n    if (pasoActual >= totalPasos) return;\r\n    \r\n    try {\r\n        if (!validarPaso(pasoActual)) {\r\n            return;\r\n        }\r\n\r\n        if (pasoActual === 4) {\r\n            guardarDatosFormulario();\r\n            actualizarResumen();\r\n        }\r\n\r\n        pasoActual++;\r\n        actualizarInterfaz();\r\n        \r\n        // Autocompletar después de avanzar al paso 4\r\n        if (pasoActual === 4 && usuarioActual) {\r\n            autocompletarFormulario(usuarioActual);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error al avanzar paso:', error);\r\n    }\r\n}\r\n\r\nfunction retrocederPaso() {\r\n    if (pasoActual > 1) {\r\n        pasoActual--;\r\n        actualizarInterfaz();\r\n    }\r\n}\r\n\r\nfunction actualizarInterfaz() {\r\n    actualizarPasos();\r\n    actualizarProgreso();\r\n    actualizarBotones();\r\n}\r\n\r\nasync function simularReserva() {\r\n  if (pasoActual === totalPasos) {\r\n    // Mostrar spinner y deshabilitar botón\r\n    const loader = document.getElementById('reserva-loader');\r\n    const btnSiguiente = document.querySelector('.btn-siguiente');\r\n    \r\n    loader.style.display = 'inline-block';\r\n    btnSiguiente.style.visibility = 'hidden';\r\n    btnSiguiente.disabled = true;\r\n\r\n    const validacion = await validarDisponibilidadCompleta(\r\n      datosReserva.fecha, \r\n      datosReserva.horario\r\n    );\r\n\r\n    if (!validacion.disponible || validacion.turnosSolapados.length > 0) {\r\n      // Restaurar UI si hay error\r\n      loader.style.display = 'none';\r\n      btnSiguiente.style.visibility = 'visible';\r\n      btnSiguiente.disabled = false;\r\n      \r\n      mostrarError(validacion.mensaje || \"El horario ya no está disponible\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Validar disponibilidad\r\n      const disponible = await firestoreDB.verificarDisponibilidad(\r\n        datosReserva.fecha, \r\n        datosReserva.horario\r\n      );\r\n      \r\n      if (!disponible) {\r\n        mostrarConfirmacion(false);\r\n        return;\r\n      }\r\n  \r\n      // Crear objeto de turno\r\n      const turnoData = {\r\n        cliente: datosReserva.nombre,\r\n        email: datosReserva.email,\r\n        telefono: datosReserva.telefono,\r\n        servicios: datosReserva.servicios.map(s => s.nombre),\r\n        fecha: datosReserva.fecha,\r\n        horario: datosReserva.horario,\r\n        montoTotal: calcularSubtotal(),\r\n        reserva: datosReserva.reserva,\r\n        observaciones: datosReserva.observacion || '',\r\n        userId: usuarioActual?.uid || null\r\n      };\r\n  \r\n      // Guardar en Firestore\r\n      await firestoreDB.guardarTurno(turnoData);\r\n      \r\n      // Enviar email de confirmación (no esperamos respuesta para no bloquear la UI)\r\n      enviarEmailConfirmacion({\r\n        ...turnoData,\r\n        nombre: datosReserva.nombre,\r\n        servicios: datosReserva.servicios.map(s => s.nombre)\r\n      }).then(enviado => {\r\n        if (!enviado) {\r\n          console.log(\"El email no pudo enviarse, pero el turno fue reservado\");\r\n        }\r\n      });\r\n\r\n      // Ocultar spinner después de la reserva exitosa\r\n      loader.style.display = 'none';\r\n      \r\n      // Mostrar confirmación\r\n      mostrarConfirmacion(true);\r\n      \r\n    } catch (error) {\r\n      console.error('Error al reservar:', error);\r\n      // Restaurar UI si hay error\r\n      loader.style.display = 'none';\r\n      btnSiguiente.style.visibility = 'visible';\r\n      btnSiguiente.disabled = false;\r\n      mostrarConfirmacion(false);\r\n    }\r\n  }\r\n}\r\n\r\nasync function completarReserva() {\r\n  let bloqueoId = null;\r\n  \r\n  try {\r\n    // 1. Crear bloqueo (con ID automático)\r\n    bloqueoId = await firestoreDB.bloquearTurnoTemporal(\r\n      datosReserva.fecha,\r\n      datosReserva.horario,\r\n      usuarioActual?.uid || 'anonimo'\r\n    );\r\n\r\n    // 2. Validación final\r\n    const config = await firestoreDB.obtenerConfiguracion();\r\n    const [disponible, turnosSolapados] = await Promise.all([\r\n      firestoreDB.verificarDisponibilidad(datosReserva.fecha, datosReserva.horario),\r\n      firestoreDB.obtenerTurnosSolapados(\r\n        datosReserva.fecha, \r\n        datosReserva.horario,\r\n        config.duracionTurno\r\n      )\r\n    ]);\r\n\r\n    if (!disponible || turnosSolapados.length > 0) {\r\n      await firestoreDB.eliminarBloqueoTemporal(bloqueoId);\r\n      mostrarError(turnosSolapados.length > 0 \r\n        ? `El horario se solapa con un turno existente (${turnosSolapados[0].servicios.join(', ')})`\r\n        : \"El horario ya fue reservado\");\r\n      return;\r\n    }\r\n\r\n    // 3. Guardar turno\r\n    const turnoData = { /* ... tus datos de turno ... */ };\r\n    await firestoreDB.guardarTurno(turnoData);\r\n\r\n    // 4. Limpiar bloqueo\r\n    await firestoreDB.eliminarBloqueoTemporal(bloqueoId);\r\n\r\n    mostrarConfirmacion(true);\r\n  } catch (error) {\r\n    console.error(\"Error en reserva:\", error);\r\n    if (bloqueoId) {\r\n      await firestoreDB.eliminarBloqueoTemporal(bloqueoId).catch(e => console.error(\"Error limpiando bloqueo:\", e));\r\n    }\r\n    mostrarConfirmacion(false);\r\n  }\r\n}\r\n\r\n// Simular disponibilidad de turnos\r\nasync function inicializarDisponibilidad() {\r\n  try {\r\n    const config = await firestoreDB.obtenerConfiguracion();\r\n    console.log(\"Configuración procesada:\", {\r\n      apertura: config.horarioApertura,\r\n      cierre: config.horarioCierre,\r\n      diasLaborales: config.diasLaborales,\r\n      diasNoLaborables: config.diasNoLaborables\r\n    });\r\n\r\n    const fechasDisponibles = generarFechasDisponibles(config);\r\n    console.log(\"Fechas generadas:\", fechasDisponibles);\r\n    \r\n    actualizarUIFechas(fechasDisponibles);\r\n  } catch (error) {\r\n    console.error(\"Error inicializando disponibilidad:\", error);\r\n    mostrarError(\"No se pudieron cargar las fechas disponibles\");\r\n  }\r\n}\r\n\r\nasync function validarDisponibilidadCompleta(fecha, horario) {\r\n  try {\r\n    const config = await firestoreDB.obtenerConfiguracion();\r\n    const [disponible, turnosSolapados] = await Promise.all([\r\n      firestoreDB.verificarDisponibilidad(fecha, horario),\r\n      firestoreDB.obtenerTurnosSolapados(fecha, horario, config.duracionTurno)\r\n    ]);\r\n\r\n    return {\r\n      disponible,\r\n      turnosSolapados,\r\n      mensaje: turnosSolapados.length > 0 ? \r\n        `El horario se solapa con ${turnosSolapados.length} turno(s) existente(s)` : \r\n        null\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error en validación:\", error);\r\n    return {\r\n      disponible: false,\r\n      turnosSolapados: [],\r\n      mensaje: \"Error al verificar disponibilidad\"\r\n    };\r\n  }\r\n}\r\n\r\n// Nueva función para generar fechas disponibles\r\nfunction generarFechasDisponibles(config) {\r\n  // Obtener fecha y hora actual en Argentina (UTC-3)\r\n  const ahoraArg = new Date(new Date().toLocaleString(\"en-US\", {timeZone: \"America/Argentina/Buenos_Aires\"}));\r\n  const hoyArg = new Date(ahoraArg.getFullYear(), ahoraArg.getMonth(), ahoraArg.getDate());\r\n  \r\n  // Verificar si ya pasó el horario de cierre (usando hora Argentina)\r\n  const [horaCierre, minCierre] = config.horarioCierre.split(':').map(Number);\r\n  const empezarDesdeManana = ahoraArg.getHours() > horaCierre || \r\n                       (ahoraArg.getHours() === horaCierre && ahoraArg.getMinutes() >= minCierre);\r\n\r\n  const fechasDisponibles = [];\r\n  const DIAS_A_MOSTRAR = 7;\r\n  \r\n  // Comenzar desde hoy o mañana según horario\r\n  const diaInicial = empezarDesdeManana ? 1 : 0;\r\n  \r\n  for (let i = diaInicial; i < DIAS_A_MOSTRAR + diaInicial; i++) {\r\n    const fecha = new Date(hoyArg);\r\n    fecha.setDate(hoyArg.getDate() + i);\r\n    \r\n    // Verificar día laboral (usando fecha Argentina)\r\n    if (!esDiaLaboral(fecha, config)) {\r\n      console.log(`Saltando ${fecha.toDateString()} - No es día laboral`);\r\n      continue;\r\n    }\r\n    \r\n    const fechaStr = fecha.toISOString().split('T')[0];\r\n    \r\n    // Verificar días no laborables\r\n    if (Array.isArray(config.diasNoLaborables) && config.diasNoLaborables.includes(fechaStr)) {\r\n      console.log(`Saltando ${fechaStr} - Día no laborable configurado`);\r\n      continue;\r\n    }\r\n    \r\n    // No agregar hoy si ya pasó el horario de cierre\r\n    if (i === 0 && empezarDesdeManana) continue;\r\n    \r\n    fechasDisponibles.push({\r\n      fecha: fechaStr,\r\n      display: formatearFechaDisplay(fecha)\r\n    });\r\n  }\r\n  \r\n  console.log(\"Fechas disponibles generadas:\", fechasDisponibles);\r\n  return fechasDisponibles;\r\n}\r\n\r\nfunction esDiaLaboral(fecha, config) {\r\n  const diaSemana = fecha.getDay(); // 0=Domingo, 1=Lunes, etc.\r\n  \r\n  // Asegurarnos que diasLaborales es un array de números válidos\r\n  let diasLaborales = [];\r\n  \r\n  try {\r\n    if (Array.isArray(config.diasLaborales)) {\r\n      diasLaborales = config.diasLaborales.map(Number).filter(n => !isNaN(n));\r\n    } else if (typeof config.diasLaborales === 'string') {\r\n      diasLaborales = config.diasLaborales.split(',').map(Number).filter(n => !isNaN(n));\r\n    }\r\n  } catch (e) {\r\n    console.error(\"Error procesando días laborales:\", e);\r\n    diasLaborales = [1,2,3,4,5]; // Valor por defecto: Lunes a Viernes\r\n  }\r\n  \r\n  // Si no hay días definidos, usar valor por defecto\r\n  if (diasLaborales.length === 0) {\r\n    diasLaborales = [1,2,3,4,5];\r\n  }\r\n  \r\n  return diasLaborales.includes(diaSemana);\r\n}\r\n\r\nfunction formatearFechaDisplay(fecha) {\r\n  return fecha.toLocaleDateString('es-AR', {\r\n    weekday: 'long',\r\n    day: 'numeric',\r\n    month: 'short'\r\n  });\r\n}\r\n\r\nfunction obtenerFechaSeleccionada() {\r\n  // Asume que la fecha está en formato \"Lunes 9/01\" o similar\r\n  // Necesitas convertir esto a un formato que coincida con tu DB (YYYY-MM-DD)\r\n  if (!datosReserva.fecha) return new Date().toISOString().split('T')[0];\r\n  \r\n  // Implementación básica - ajusta según tu formato de fecha\r\n  const partes = datosReserva.fecha.split(' ');\r\n  const [dia, mes] = partes[1].split('/');\r\n  const año = new Date().getFullYear();\r\n  \r\n  return `${año}-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}`;\r\n}\r\n\r\nfunction actualizarUIFechas(fechasDisponibles) {\r\n  const paso2 = document.querySelector('.paso-2');\r\n  if (!paso2) {\r\n    console.error('No se encontró el contenedor del paso 2');\r\n    return;\r\n  }\r\n\r\n  const contenedorFechas = paso2.querySelector('.contenedor-fechas');\r\n  const plantillaFecha = paso2.querySelector('.flotante.fecha');\r\n  const cargando = paso2.querySelector('.cargando-fechas');\r\n  const sinFechas = paso2.querySelector('.sin-fechas');\r\n\r\n  // Ocultar mensaje de carga y limpiar contenedor\r\n  if (cargando) cargando.style.display = 'none';\r\n  if (sinFechas) sinFechas.style.display = 'none';\r\n  contenedorFechas.innerHTML = '';\r\n\r\n  if (plantillaFecha) {\r\n    plantillaFecha.style.display = 'none';\r\n  }\r\n\r\n  if (fechasDisponibles.length === 0) {\r\n    if (sinFechas) {\r\n      sinFechas.style.display = 'block';\r\n      sinFechas.textContent = 'No hay fechas disponibles en este momento';\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Mostrar fechas disponibles\r\n  contenedorFechas.style.display = 'grid';\r\n  fechasDisponibles.forEach(fecha => {\r\n    if (!plantillaFecha) return;\r\n    \r\n    const nuevoElemento = plantillaFecha.cloneNode(true);\r\n    nuevoElemento.style.display = 'flex';\r\n    nuevoElemento.querySelector('.p1').textContent = fecha.display;\r\n    nuevoElemento.dataset.fechaReal = fecha.fecha;\r\n    \r\n    nuevoElemento.addEventListener('click', function() {\r\n      seleccionarElemento(this, 'fecha');\r\n      cargarHorariosParaFecha(fecha.fecha);\r\n    });\r\n    \r\n    contenedorFechas.appendChild(nuevoElemento);\r\n  });\r\n}\r\n\r\nasync function cargarHorariosParaFecha(fecha) {\r\n  const paso3 = document.querySelector('.paso-3');\r\n  if (!paso3) return;\r\n\r\n  // Resetear estado primero\r\n  const contenedor = paso3.querySelector('.contenedor-horarios');\r\n  const sinHorarios = paso3.querySelector('.sin-horarios');\r\n  \r\n  if (contenedor) contenedor.innerHTML = '';\r\n  if (sinHorarios) sinHorarios.style.display = 'none';\r\n\r\n  // Mostrar carga\r\n  const cargando = paso3.querySelector('.cargando-horarios');\r\n  if (cargando) cargando.style.display = 'block';\r\n\r\n  try {\r\n    console.log(\"Cargando horarios para fecha:\", fecha);\r\n    let horarios = await firestoreDB.generarHorariosDisponibles(fecha);\r\n    console.log(\"Horarios recibidos:\", horarios);\r\n    \r\n    // Obtener fecha actual en Argentina (UTC-3)\r\n    const ahoraArg = new Date(new Date().toLocaleString(\"en-US\", {timeZone: \"America/Argentina/Buenos_Aires\"}));\r\n    const hoyArg = new Date(ahoraArg.getFullYear(), ahoraArg.getMonth(), ahoraArg.getDate());\r\n    const fechaSeleccionada = new Date(fecha + 'T00:00:00-03:00'); // Forzar zona horaria Argentina\r\n    \r\n    // Si es hoy, filtrar los horarios que ya pasaron o están muy próximos\r\n    if (fechaSeleccionada.getTime() === hoyArg.getTime()) {\r\n      const ahoraEnMinutos = ahoraArg.getHours() * 60 + ahoraArg.getMinutes();\r\n      const tiempoMinimoReserva = 30; // 30 minutos de anticipación\r\n      \r\n      horarios = horarios.filter(horario => {\r\n        const [horas, minutos] = horario.hora.split(':').map(Number);\r\n        const horarioEnMinutos = horas * 60 + minutos;\r\n        \r\n        // Solo mostrar horarios que tengan al menos 30 minutos de diferencia\r\n        return horarioEnMinutos >= ahoraEnMinutos + tiempoMinimoReserva;\r\n      });\r\n      \r\n      console.log(\"Horarios filtrados para hoy:\", horarios);\r\n    }\r\n    \r\n    // Guardar fecha seleccionada\r\n    datosReserva.fecha = fecha;\r\n    \r\n    // Actualizar UI\r\n    actualizarUIHorarios(horarios);\r\n    \r\n  } catch (error) {\r\n    console.error(\"Error cargando horarios:\", error);\r\n    if (sinHorarios) {\r\n      sinHorarios.style.display = 'block';\r\n      sinHorarios.textContent = 'Error al cargar horarios. Intenta nuevamente.';\r\n    }\r\n  } finally {\r\n    if (cargando) cargando.style.display = 'none';\r\n    if (contenedor) contenedor.style.display = 'grid';\r\n  }\r\n}\r\n\r\nasync function generarHorariosDisponibles(fecha) {\r\n  const [config, turnosOcupados] = await Promise.all([\r\n    this.obtenerConfiguracion(),\r\n    this.obtenerTurnosPorFecha(fecha)\r\n  ]);\r\n  \r\n  const horariosOcupados = turnosOcupados.map(t => t.horario);\r\n  const horarios = this._generarHorarios(config, horariosOcupados, fecha);\r\n  \r\n  console.log(\"Horarios generados para\", fecha, \":\", horarios);\r\n  return horarios;\r\n}\r\n\r\nfunction actualizarUIHorarios(horariosDisponibles) {\r\n  const paso3 = document.querySelector('.paso-3');\r\n  if (!paso3) return;\r\n\r\n  const contenedor = paso3.querySelector('.contenedor-horarios');\r\n  const plantilla = paso3.querySelector('.flotante.horario');\r\n  const sinHorarios = paso3.querySelector('.sin-horarios');\r\n  \r\n  // Limpiar contenedor completamente\r\n  if (contenedor) contenedor.innerHTML = '';\r\n  if (sinHorarios) sinHorarios.style.display = 'none';\r\n\r\n  // Mostrar mensaje si no hay horarios\r\n  if (!horariosDisponibles || horariosDisponibles.length === 0) {\r\n    if (sinHorarios) {\r\n      sinHorarios.style.display = 'block';\r\n      sinHorarios.textContent = 'No hay horarios disponibles para esta fecha';\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Crear elementos de horarios\r\n  horariosDisponibles.forEach(horario => {\r\n    const elemento = document.createElement('div');\r\n    elemento.className = 'flotante horario';\r\n    elemento.style.display = 'flex';\r\n    \r\n    // Crear elementos internos\r\n    const p1 = document.createElement('p');\r\n    p1.className = 'p1';\r\n    p1.textContent = horario.hora;\r\n    \r\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\r\n    svg.setAttribute('class', 'check-icon');\r\n    svg.setAttribute('viewBox', '0 0 24 24');\r\n    \r\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\r\n    path.setAttribute('d', 'M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z');\r\n    \r\n    svg.appendChild(path);\r\n    \r\n    // Ensamblar el elemento\r\n    elemento.appendChild(p1);\r\n    elemento.appendChild(svg);\r\n    \r\n    // Solo agregar la clase .ocupado si no está disponible\r\n    if (!horario.disponible) {\r\n      elemento.classList.add('ocupado');\r\n    } else {\r\n      elemento.addEventListener('click', () => {\r\n        seleccionarElemento(elemento, 'horario');\r\n        datosReserva.horario = horario.hora;\r\n      });\r\n    }\r\n    \r\n    if (contenedor) contenedor.appendChild(elemento);\r\n  });\r\n}\r\n\r\nasync function verificarDisponibilidadEnTiempoReal(fecha, horario) {\r\n  try {\r\n    const disponible = await firestoreDB.verificarDisponibilidad(fecha, horario);\r\n    if (!disponible) {\r\n      mostrarError('Este horario ya no está disponible. Por favor selecciona otro.');\r\n      // Remover el horario ocupado de la UI\r\n      document.querySelectorAll('.flotante.horario').forEach(el => {\r\n        if (el.textContent.trim() === horario) {\r\n          el.classList.add('ocupado');\r\n          el.removeEventListener('click', manejarClickHorario);\r\n        }\r\n      });\r\n      return false;\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error verificando disponibilidad:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Función auxiliar para crear el contenedor si no existe\r\nfunction crearContenedorHorarios(paso3) {\r\n  const contenedor = document.createElement('div');\r\n  contenedor.className = 'contenedor-horarios';\r\n  paso3.appendChild(contenedor);\r\n  return contenedor;\r\n}\r\n\r\n// Funciones de apoyo\r\nfunction actualizarPasos() {\r\n    elementos.pasos.forEach((paso, index) => {\r\n        paso.classList.toggle('activo', index + 1 === pasoActual);\r\n    });\r\n}\r\n\r\nfunction actualizarProgreso() {\r\n    const porcentaje = (pasoActual / totalPasos) * 100;\r\n    elementos.progreso.style.width = `${porcentaje}%`;\r\n}\r\n\r\nfunction actualizarBotones() {\r\n    // Ocultar spinner al cambiar de paso\r\n    const loader = document.getElementById('reserva-loader');\r\n    if (loader) loader.style.display = 'none';\r\n\r\n    // Botón anterior\r\n    if (pasoActual === 1) {\r\n        elementos.btnAnterior.classList.remove('activo');\r\n    } else {\r\n        elementos.btnAnterior.classList.add('activo');\r\n    }\r\n    \r\n    // Limpiar eventos previos del botón siguiente\r\n    elementos.btnSiguiente.replaceWith(elementos.btnSiguiente.cloneNode(true));\r\n    elementos.btnSiguiente = document.querySelector('.btn-siguiente');\r\n    \r\n    // Configurar botón siguiente según el paso actual\r\n    if (pasoActual === totalPasos) {\r\n        elementos.btnSiguiente.classList.add('btn-reserva');\r\n        elementos.btnSiguiente.textContent = 'Reservar';\r\n        elementos.btnSiguiente.addEventListener('click', async () => {\r\n            await simularReserva();\r\n        });\r\n    } else {\r\n        elementos.btnSiguiente.classList.remove('btn-reserva');\r\n        elementos.btnSiguiente.innerHTML = `\r\n            <svg class=\"flecha\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\r\n                <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\" fill=\"ffffff\"/>\r\n            </svg>\r\n        `;\r\n        elementos.btnSiguiente.addEventListener('click', avanzarPaso);\r\n    }\r\n}\r\n\r\nfunction seleccionarElemento(elemento, tipo) {\r\n    // Si ya está seleccionado y es servicio, deseleccionar\r\n    if (elemento.classList.contains('seleccionado') && tipo === 'servicio') {\r\n        elemento.classList.remove('seleccionado');\r\n        actualizarServiciosSeleccionados();\r\n        return;\r\n    }\r\n\r\n    // Para servicios (selección múltiple)\r\n    if (tipo === 'servicio') {\r\n        elemento.classList.add('seleccionado');\r\n        actualizarServiciosSeleccionados();\r\n    } \r\n    // Para fechas/horarios (selección única)\r\n    else {\r\n        document.querySelectorAll(`.flotante.${tipo}`).forEach(el => {\r\n            el.classList.remove('seleccionado');\r\n        });\r\n        elemento.classList.add('seleccionado');\r\n        datosReserva[tipo] = elemento.querySelector('.p1').textContent;\r\n        \r\n        // Remover mensaje de error si se selecciona\r\n        if (tipo === 'fecha') {\r\n            document.getElementById('error-fecha').classList.remove('visible');\r\n        } else if (tipo === 'horario') {\r\n            document.getElementById('error-horario').classList.remove('visible');\r\n        }\r\n    }\r\n}\r\n\r\nfunction validarPaso(paso) {\r\n    const pasoElement = document.querySelector(`.paso-${paso}`);\r\n    if (!pasoElement) {\r\n        console.error(`Elemento del paso ${paso} no encontrado`);\r\n        return false;\r\n    }\r\n\r\n    // Ocultar todos los mensajes de error primero\r\n    const errores = pasoElement.querySelectorAll('.error-mensaje');\r\n    if (errores) {\r\n        errores.forEach(msg => msg.classList.remove('visible'));\r\n    }\r\n\r\n    switch (paso) {\r\n        case 1: \r\n            const errorServicio = pasoElement.querySelector('#error-servicio');\r\n            if (datosReserva.servicios.length === 0) {\r\n                if (errorServicio) errorServicio.classList.add('visible');\r\n                return false;\r\n            }\r\n            return true;\r\n            \r\n        case 2:\r\n            const errorFecha = pasoElement.querySelector('#error-fecha');\r\n            if (!datosReserva.fecha) {\r\n                if (errorFecha) errorFecha.classList.add('visible');\r\n                return false;\r\n            }\r\n            return true;\r\n            \r\n        case 3:\r\n            const errorHorario = pasoElement.querySelector('#error-horario');\r\n            if (!datosReserva.horario) {\r\n                if (errorHorario) errorHorario.classList.add('visible');\r\n                return false;\r\n            }\r\n            return true;\r\n            \r\n        case 4:\r\n            return validarFormulario();\r\n            \r\n        default:\r\n            return true;\r\n    }\r\n}\r\n\r\nfunction validarFormulario() {\r\n    let valido = true;\r\n    const nombre = document.getElementById('nombre').value.trim();\r\n    const email = document.getElementById('email').value.trim();\r\n    const telefono = document.getElementById('telefono').value.trim();\r\n    \r\n    // Ocultar todos los mensajes primero\r\n    document.querySelectorAll('.error-mensaje').forEach(msg => {\r\n        msg.classList.remove('visible');\r\n    });\r\n    \r\n    // Validar nombre\r\n    if (!nombre || nombre.length < 5) {\r\n        document.getElementById('error-nombre').classList.add('visible');\r\n        document.getElementById('nombre').classList.add('invalido');\r\n        valido = false;\r\n    }\r\n    \r\n    // Validar email\r\n    if (!email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n        document.getElementById('error-email').classList.add('visible');\r\n        document.getElementById('email').classList.add('invalido');\r\n        valido = false;\r\n    }\r\n    \r\n    // Validar teléfono\r\n    if (!telefono || !/^[0-9]{10}$/.test(telefono)) {\r\n        document.getElementById('error-telefono').classList.add('visible');\r\n        document.getElementById('telefono').classList.add('invalido');\r\n        valido = false;\r\n    }\r\n    \r\n    return valido;\r\n}\r\n\r\nfunction guardarDatosFormulario() {\r\n    datosReserva.nombre = document.getElementById('nombre').value.trim();\r\n    datosReserva.email = document.getElementById('email').value.trim();\r\n    datosReserva.telefono = document.getElementById('telefono').value.trim();\r\n    datosReserva.observacion = document.getElementById('observacion').value.trim() || 'Ninguna';\r\n}\r\n\r\nfunction actualizarResumen() {\r\n    // Verificar que los elementos existen antes de acceder\r\n    if (elementos.resumenNombre) {\r\n        elementos.resumenNombre.textContent = datosReserva.nombre || \"[No ingresado]\";\r\n    }\r\n    \r\n    const emailElement = document.getElementById('cliente-email');\r\n    if (emailElement) {\r\n        emailElement.textContent = datosReserva.email || \"[No ingresado]\";\r\n    }\r\n    \r\n    if (elementos.resumenTelefono) {\r\n        elementos.resumenTelefono.textContent = datosReserva.telefono || \"[No ingresado]\";\r\n    }\r\n    \r\n    // Servicios seleccionados\r\n    const listaServicios = datosReserva.servicios.length > 0\r\n        ? datosReserva.servicios.map(s => `${s.nombre}`).join(\", \")\r\n        : \"Ninguno seleccionado\";\r\n    elementos.resumenServicio.innerHTML = listaServicios;\r\n    \r\n    // Fecha y hora\r\n    elementos.resumenFecha.textContent = datosReserva.fecha || \"[No seleccionada]\";\r\n    elementos.resumenHorario.textContent = datosReserva.horario || \"[No seleccionado]\";\r\n    elementos.resumenObservacion.textContent = datosReserva.observacion;\r\n    \r\n    // Cálculos de precios\r\n    const subtotal = calcularSubtotal();\r\n    const saldoPendiente = Math.max(0, subtotal - datosReserva.reserva); // No negativo\r\n    \r\n    document.getElementById('subtotal').textContent = `$${subtotal.toLocaleString()}`;\r\n    document.getElementById('senia').textContent = `$${datosReserva.reserva.toLocaleString()}`;\r\n    document.getElementById('saldo-pendiente').textContent = `$${saldoPendiente.toLocaleString()}`;\r\n}\r\n\r\nfunction validarNombre() {\r\n    const input = document.getElementById('nombre');\r\n    const errorMsg = document.getElementById('error-nombre');\r\n    \r\n    if (input.value.trim().length >= 5) {\r\n        input.classList.remove('invalido');\r\n        errorMsg.classList.remove('visible');\r\n    } else {\r\n        input.classList.add('invalido');\r\n    }\r\n}\r\n\r\nfunction validarTelefono() {\r\n    const input = document.getElementById('telefono');\r\n    const errorMsg = document.getElementById('error-telefono');\r\n    \r\n    if (/^[0-9]{10}$/.test(input.value)) {\r\n        input.classList.remove('invalido');\r\n        errorMsg.classList.remove('visible');\r\n    } else {\r\n        input.classList.add('invalido');\r\n    }\r\n}\r\n\r\n// Nueva función para validar email\r\nfunction validarEmail() {\r\n    const input = document.getElementById('email');\r\n    const errorMsg = document.getElementById('error-email');\r\n    \r\n    if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(input.value)) {\r\n        input.classList.remove('invalido');\r\n        errorMsg.classList.remove('visible');\r\n    } else {\r\n        input.classList.add('invalido');\r\n    }\r\n}\r\n\r\nasync function mostrarConfirmacion(exito) {\r\n    // Ocultar todos los pasos\r\n    elementos.pasos.forEach(paso => paso.classList.remove('activo'));\r\n    \r\n    // Mostrar paso de confirmación\r\n    const paso6 = document.querySelector('.paso-6');\r\n    paso6.classList.add('activo');\r\n    \r\n    // SVG para éxito y error\r\n    const successSVG = `\r\n      <svg class=\"confirmacion-icono\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\r\n      </svg>\r\n    `;\r\n    \r\n    const errorSVG = `\r\n      <svg class=\"confirmacion-icono\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/>\r\n      </svg>\r\n    `;\r\n    \r\n    // Botón SVG\r\n    const buttonSVG = `\r\n      <svg viewBox=\"0 0 24 24\">\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/>\r\n      </svg>\r\n    `;\r\n\r\n    // Mostrar el estado correspondiente\r\n    if (exito) {\r\n        const subtotal = datosReserva.servicios.reduce((total, servicio) => total + servicio.precio, 0);\r\n        const saldoPendiente = Math.max(0, subtotal - datosReserva.reserva);\r\n        \r\n        const exitoContainer = document.querySelector('.paso-6 .exito');\r\n        exitoContainer.innerHTML = `\r\n            ${successSVG}\r\n            <h2>¡Turno reservado!</h2>\r\n            <p>Nos vemos en la pelu. Recibirás un email de confirmación.</p>\r\n            <div class=\"resumen-confirmacion\">\r\n                <h3>Resumen de tu reserva</h3>\r\n                <p><strong>Servicios:</strong> ${datosReserva.servicios.map(s => s.nombre).join(', ')}</p>\r\n                <p><strong>Fecha:</strong> ${datosReserva.fecha}</p>\r\n                <p><strong>Hora:</strong> ${datosReserva.horario}</p>\r\n                <p><strong>Seña abonada:</strong> $${datosReserva.reserva.toLocaleString()}</p>\r\n                <p class=\"total-confirmacion\">Saldo pendiente: $${saldoPendiente.toLocaleString()}</p>\r\n            </div>\r\n        `;\r\n        \r\n        document.querySelector('.paso-6 .exito').classList.add('visible');\r\n        document.querySelector('.paso-6 .error').classList.remove('visible');\r\n    } else {\r\n        const errorContainer = document.querySelector('.paso-6 .error');\r\n        errorContainer.innerHTML = `\r\n            ${errorSVG}\r\n            <h2>No se pudo realizar la reserva</h2>\r\n            <p>Intenta nuevamente en unos minutos.</p>\r\n        `;\r\n        \r\n        document.querySelector('.paso-6 .exito').classList.remove('visible');\r\n        document.querySelector('.paso-6 .error').classList.add('visible');\r\n    }\r\n    \r\n    // Ocultar controles de navegación\r\n    elementos.btnAnterior.style.display = 'none';\r\n    elementos.btnSiguiente.style.display = 'none';\r\n    \r\n    // Botón para nueva reserva\r\n    if (!document.getElementById('nueva-reserva')) {\r\n        const botonNuevaReserva = `\r\n            <button id=\"nueva-reserva\" class=\"btn-reserva\">\r\n                ${buttonSVG}\r\n                ${exito ? 'Volver' : 'Volver a intentar'}\r\n            </button>\r\n        `;\r\n        paso6.insertAdjacentHTML('beforeend', botonNuevaReserva);\r\n        \r\n        document.getElementById('nueva-reserva').addEventListener('click', () => {\r\n            location.reload();\r\n        });\r\n    }\r\n}\r\n\r\n//////////////////////////////////////////\r\n//////////// Autenticacion //////////////\r\n/////////////////////////////////////////\r\n\r\nfunction inicializarAuth() {\r\n  const authContainer = document.querySelector('nav');\r\n  if (!authContainer) return;\r\n\r\n  // Crear botón si no existe\r\n  if (!document.getElementById('btn-google')) {\r\n    authContainer.innerHTML += '<button id=\"btn-google\">Acceder</button>';\r\n  }\r\n\r\n  // Manejar estado de autenticación\r\n  firebase.auth().onAuthStateChanged(user => {\r\n    usuarioActual = user;\r\n    const btnGoogle = document.getElementById('btn-google');\r\n    \r\n    if (user) {\r\n      // Reemplazar botón con nombre\r\n      btnGoogle.outerHTML = `<p class=\"usuario-nombre\">${user.displayName}</p>`;\r\n      guardarUsuario(user);\r\n    } else {\r\n      // Asegurarse que el botón existe\r\n      if (!document.getElementById('btn-google')) {\r\n        authContainer.innerHTML += '<button id=\"btn-google\">Acceder</button>';\r\n      }\r\n      limpiarUsuario();\r\n    }\r\n  });\r\n\r\n  // Delegación de eventos para el botón dinámico\r\n  document.querySelector('nav').addEventListener('click', async (e) => {\r\n    if (e.target.id === 'btn-google') {\r\n      try {\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n        await firebase.auth().signInWithPopup(provider);\r\n      } catch (error) {\r\n        console.error('Error de autenticación:', error);\r\n        alert('Error al iniciar sesión: ' + error.message);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// Función para mostrar errores de autenticación\r\nfunction mostrarErrorAuth(error) {\r\n  let mensaje = 'Error al autenticar';\r\n  \r\n  if (error.code === 'auth/popup-closed-by-user') {\r\n    mensaje = 'El popup de autenticación fue cerrado';\r\n  } else if (error.code === 'auth/cancelled-popup-request') {\r\n    mensaje = 'Solicitud de autenticación cancelada';\r\n  } else {\r\n    mensaje = error.message || 'Error desconocido';\r\n  }\r\n  \r\n  alert(mensaje); // O puedes mostrar esto en tu UI\r\n}\r\n\r\n// Guardar datos del usuario en LocalStorage\r\nfunction guardarUsuario(user) {\r\n  localStorage.setItem('usuario', JSON.stringify({\r\n    uid: user.uid,\r\n    nombre: user.displayName,\r\n    email: user.email\r\n  }));\r\n}\r\n\r\n// Limpiar datos del usuario\r\nfunction limpiarUsuario() {\r\n  localStorage.removeItem('usuario');\r\n}\r\n\r\n// Actualizar la UI con los datos del usuario\r\nfunction actualizarUIUsuario(user) {\r\n  const btnGoogle = document.getElementById('btn-google');\r\n  if (!btnGoogle) return;\r\n\r\n  // Cambiar el botón por un simple párrafo con el nombre\r\n  btnGoogle.outerHTML = `<p class=\"usuario-nombre\"></p>`;\r\n  \r\n  // Autocompletar formulario\r\n  autocompletarFormulario(user);\r\n}\r\n\r\nfunction mostrarBotonLogin() {\r\n  const contenedor = document.querySelector('nav h1').parentElement;\r\n  if (!contenedor.querySelector('#btn-google')) {\r\n    contenedor.innerHTML += '<button id=\"btn-google\">Acceder</button>';\r\n  }\r\n}\r\n\r\nfunction autocompletarFormulario(user) {\r\n  // Solo autocompletar si estamos en el paso 4 y los campos existen\r\n  const paso4 = document.querySelector('.paso-4');\r\n  if (!paso4 || !paso4.classList.contains('activo') || !user) return;\r\n\r\n  const nombreInput = document.getElementById('nombre');\r\n  const emailInput = document.getElementById('email');\r\n  \r\n  if (nombreInput && !nombreInput.value) {\r\n    nombreInput.value = user.displayName || '';\r\n    validarNombre();\r\n  }\r\n  \r\n  if (emailInput && !emailInput.value) {\r\n    emailInput.value = user.email || '';\r\n    validarEmail();\r\n    datosReserva.email = user.email;\r\n  }\r\n}\r\n\r\n//////////////////////////////\r\n//////////////////////////////\r\n//////////////////////////////\r\n//////////////////////////////\r\n////////////////////////////// \r\n"]}